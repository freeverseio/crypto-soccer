:#: Javascript Node CircleCI 2.1 configuration file
version: 2.1

executors:
  freeverse:
    docker:
      - image: freeverseio/circleci
  freeverse_ethereum:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/xdai:test
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD

      - image: postgres:11.6-alpine
        environment:
          - POSTGRES_USER=freeverse
          - POSTGRES_PASSWORD=freeverse
          - POSTGRES_DB=cryptosoccer
      - image: ipfs/go-ipfs:v0.4.23
        environment:
          - IPFS_PROFILE=server

commands:
  submit_universe_db_schema:
    description: "Submit cryptosoccer schema in database"
    steps:
      - run: cd universe.db && PGPASSWORD=freeverse psql -U freeverse -d cryptosoccer -h localhost -p 5432 -f *.sql
  generate_contracts_code:
    description: "Compile and generate code for the services that need to communicate with them"
    steps:
      - run: make setup contracts

jobs:
  truffle_core:
    executor: freeverse
    steps:
      - checkout
      - run: cd truffle-core && npm install
      - run: cd truffle-core && ./node_modules/.bin/truffle compile
      - run: cd truffle-core && ./node_modules/.bin/truffle test
  synchronizer:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - run: cd go/cmd/synchronizer && go build ./synchronizer.go
      - run: cd go/synchronizer/process && go test ./... -v
      - run: cd go/synchronizer/utils && go test ./... -v
      - run: cd go/synchronizer/engine && go test ./... -v
      - run: cd go/synchronizer/matchevents && go test ./... -v
  go1:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - run: cd go/contracts && go test ./...
      - run: cd go/useractions && go test ./...
      - run: cd go/marketpay/v1 && go test ./...
      - run: cd go/storage && go test ./...
      - run: cd go/authproxy && go test ./...
      # - run: cd go/testutils && go test ./...
      - run: cd go/names && go test ./...
  market-notary:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - run: cd go/cmd/notary && go build ./notary.go
      # - run: cd go/notary && go test ./... -p 1
  relay-actions:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - run: cd go/cmd/relay && go build ./relay.go
      - run: cd go/relay && go test ./...
  market-trader:
    executor: freeverse
    steps:
      - checkout
      - run: cd market.trader && npm install
      - run: cd market.trader && npm test
  dockerization-development:
    executor: freeverse
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      - run: cd market.trader && docker build -t freeverseio/market.trader:dev .
      - run: cd universe.db && docker build -t freeverseio/universe.db:dev .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:dev .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:dev .
      - run: cd dashboard && docker build -t freeverseio/dashboard:dev .
      - run: cd market.db && docker build -t freeverseio/market.db:dev .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:dev .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:dev .
      - run: cd go && docker build -f Dockerfile.authproxy -t freeverseio/authproxy:dev .
      - run: cd universe.api && docker build -t freeverseio/universe.api:dev .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer:dev
      - run: docker push freeverseio/horizon:dev
      - run: docker push freeverseio/universe.db:dev
      - run: docker push freeverseio/market.db:dev
      - run: docker push freeverseio/market.trader:dev
      - run: docker push freeverseio/market.notary:dev
      - run: docker push freeverseio/universe.api:dev
      - run: docker push freeverseio/relay.actions:dev
      - run: docker push freeverseio/authproxy:dev
      - run: docker push freeverseio/dashboard:dev
  dockerization-production:
    executor: freeverse
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      - run: cd market.trader && docker build -t freeverseio/market.trader:${CIRCLE_TAG} .
      - run: cd universe.db && docker build -t freeverseio/universe.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:${CIRCLE_TAG} .
      - run: cd dashboard && docker build -t freeverseio/dashboard:${CIRCLE_TAG} .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:${CIRCLE_TAG} .
      - run: cd market.db && docker build -t freeverseio/market.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:${CIRCLE_TAG} .
      - run: cd universe.api && docker build -t freeverseio/universe.api:${CIRCLE_TAG} .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer:${CIRCLE_TAG}
      - run: docker push freeverseio/horizon:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.trader:${CIRCLE_TAG}
      - run: docker push freeverseio/market.notary:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.api:${CIRCLE_TAG}
      - run: docker push freeverseio/relay.actions:${CIRCLE_TAG}
      - run: docker push freeverseio/dashboard:${CIRCLE_TAG}
  deploy:
    executor: freeverse
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1f:0d:ef:01:c6:82:5d:62:6c:2c:3f:57:37:ac:b9:13"
      - checkout
      - run: scp -o StrictHostKeyChecking=no ./deployment/development/docker-compose.yml $DROPLET_USER@$DROPLET_IP:./
      - run: scp -o StrictHostKeyChecking=no ./deployment/development/.env $DROPLET_USER@$DROPLET_IP:./
      - run: scp -o StrictHostKeyChecking=no ./deployment/development/deploy.sh $DROPLET_USER@$DROPLET_IP:./
      - run: ssh -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "./deploy.sh"
  deployk8s:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - kube-orb/install-kubectl
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA
      - run: cd deployment/dok8s &&  /bin/bash cicd_deploy.sh
orbs:
  kube-orb: circleci/kubernetes@0.11.0
workflows:
  version: 2
  build_and_test:
    jobs:
      - truffle_core:
          filters:
            tags:
              only: /.*/
      - synchronizer:
          filters:
            tags:
              only: /.*/
      - go1:
          filters:
            tags:
              only: /.*/
      - market-trader:
          filters:
            tags:
              only: /.*/
      - relay-actions:
          filters:
            tags:
              only: /.*/
      - market-notary:
          filters:
            tags:
              only: /.*/
      - dockerization-development:
          filters:
            branches:
              only:
                - dev
          requires:
            - synchronizer
            - market-trader
            - relay-actions
            - market-notary
            - go1
      - dockerization-production:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+(.+)?/
            branches:
              ignore: /.*/
          requires:
            - synchronizer
            - market-trader
            - relay-actions
            - market-notary
      - deploy:
          filters:
           branches:
              only:
                - dev
          requires:
            - dockerization-development
            - truffle_core
      - deployk8s:
          filters:
           branches:
              only:
                - dev
                - k8s
          requires:
            - dockerization-development
            - truffle_core

