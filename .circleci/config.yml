:#: Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  truffle_core:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - run: cd truffle-core && npm install
      - run: cd truffle-core && ./node_modules/.bin/truffle compile
      - run: cd truffle-core && ./node_modules/.bin/truffle test
  go-synchronizer:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/ethereum:test
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
    steps:
      - checkout
      - run: make setup contracts
      - run: cd go-synchronizer && go build
      - run: cd go-synchronizer && go test ./...
  market.notary:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - run: make setup contracts
      - run: cd market/notary && go build
      - run: |
            ./market/notary/testutils/run_ganache.sh > /dev/null 2>&1 &
            # wait until blockchain node is up and running
            echo waiting for blockchain node
            while [ -z "`lsof -i -P -n | grep 8545`" ]; do sleep 0.1; done
            sleep 1
            echo blockchain is running
            cd market/notary && go test ./...
  relay.api:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - run: make setup contracts
      - run: cd relay/nodejs-api && npm install
      - run: cd relay/nodejs-api && npm test
  relay.actions:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/ethereum:test
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
    steps:
      - checkout
      - run: make setup contracts
      - run: cd relay && go build
      - run: cd relay && go test ./...
  market.trader:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - run: cd market/trader && npm install
      - run: cd market/trader && npm test
  django-centauri:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - run: cd django-centauri && pip3 install django && pip3 install djangorestframework && pip3 install requests
      - run: cd django-centauri && python3 manage.py test
  dockerization:
    docker:
      - image: freeverseio/circleci
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - run: make setup contracts
      - run: cd django-centauri && docker build -t freeverseio/centauri:dev .
      - run: cd market/trader && docker build -t freeverseio/market.trader:dev .
      - run: cd go-synchronizer/sql && docker build -t freeverseio/postgres:dev .
      - run: cd relay && docker build -t freeverseio/relay.actions:dev .
      - run: cd relay/nodejs-api && docker build -t freeverseio/relay.api:dev .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:dev .
      - run: cd market/db && docker build -t freeverseio/market.db:dev .
      - run: cd go-synchronizer && docker build -t freeverseio/synchronizer:dev .
      - run: cd market/notary && docker build -t freeverseio/market.notary:dev .
      - run: cd nodejs-universe-api && docker build -t freeverseio/universeapi:dev .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/centauri:dev
      - run: docker push freeverseio/synchronizer:dev
      - run: docker push freeverseio/horizon:dev
      - run: docker push freeverseio/postgres:dev
      - run: docker push freeverseio/market.db:dev
      - run: docker push freeverseio/market.trader:dev
      - run: docker push freeverseio/market.notary:dev
      - run: docker push freeverseio/relay.api:dev
      - run: docker push freeverseio/universeapi:dev
      - run: docker push freeverseio/relay.actions:dev
  deploy:
    docker:
      - image: freeverseio/circleci
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1f:0d:ef:01:c6:82:5d:62:6c:2c:3f:57:37:ac:b9:13"
      - checkout
      - run: scp -o StrictHostKeyChecking=no ./deployment/docker-compose.development.yml $DROPLET_USER@$DROPLET_IP:./
      - run: scp -o StrictHostKeyChecking=no ./deployment/.env $DROPLET_USER@$DROPLET_IP:./
      - run: ssh -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "./deploy.sh"

workflows:
  version: 2
  build_and_test:
    jobs:
      - truffle_core
      - go-synchronizer
      - django-centauri
      - market.trader
      - relay.actions
      - relay.api
      - market.notary
      - dockerization:
          filters:
            branches:
              only:
                - dev
                - ci
          requires:
            - go-synchronizer
            - django-centauri
            - market.trader
            - relay.api
            - relay.actions
            - market.notary
      - deploy:
          filters:
           branches:
              only:
                - dev
          requires:
            - dockerization
            - truffle_core


