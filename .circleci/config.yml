:#: Javascript Node CircleCI 2.1 configuration file
version: 2.1

orbs:
  kube-orb: circleci/kubernetes@0.11.0

environment:
  PATH: >-
    /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/local/go/bin:/go/bin

executors:
  freeverse:
    docker:
      - image: freeverseio/circleci
  freeverse_ethereum:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/xdai:dev
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
      - image: postgres:11.6-alpine
        environment:
          - POSTGRES_USER=freeverse
          - POSTGRES_PASSWORD=freeverse
          - POSTGRES_DB=cryptosoccer
      - image: ipfs/go-ipfs:v0.5.0
        environment:
          - IPFS_PROFILE=test
  freeverse_market:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/xdai:dev
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
      - image: postgres:11.6-alpine
        environment:
          - POSTGRES_USER=freeverse
          - POSTGRES_PASSWORD=freeverse
          - POSTGRES_DB=market

commands:
  submit_universe_db_schema:
    description: "Submit cryptosoccer schema in database"
    steps:
      - run: cd universe.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d cryptosoccer -h localhost -p 5432 -f $f; done
  submit_market_db_schema:
    description: "Submit cryptosoccer schema in database"
    steps:
      - run: cd market.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d market -h localhost -p 5432 -f $f; done
  generate_contracts_code:
    description: "Compile and generate code for the services that need to communicate with them"
    steps:
      - run: make setup contracts
  install_kustomize:
    description: "Install kustomize"
    steps:
      - run: wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.5.4/kustomize_v3.5.4_linux_amd64.tar.gz
      - run: tar xvzf ./kustomize_v3.5.4_linux_amd64.tar.gz
      - run: rm ./kustomize_v3.5.4_linux_amd64.tar.gz
      - run: chmod +x ./kustomize
      - run: sudo mv ./kustomize /usr/local/bin
  install_and_run_ipfs_cluster:
    description: "Install ipfs_cluster"
    steps:
      - run: wget https://dist.ipfs.io/ipfs-cluster-service/v0.12.1/ipfs-cluster-service_v0.12.1_linux-amd64.tar.gz
      - run: tar xvzf ipfs-cluster-service_v0.12.1_linux-amd64.tar.gz
      - run: chmod +x ipfs-cluster-service/ipfs-cluster-service
        #- run: sudo mv ipfs-cluster-service/ipfs-cluster-service /usr/local/bin
      - run: ls -alsh ipfs-cluster-service
      - run: mv ./ipfs-cluster-service/ipfs-cluster-service /usr/local/bin
      - run: ls -alsh /usr/local/bin
      - run: echo $PATH
      - run: ipfs-cluster-service init
      - run: ipfs-cluster-service daemon

        #- run: git clone https://github.com/ipfs/ipfs-cluster.git
        #- run: cd ipfs-cluster
        #- run: export GO111MODULE=on
        #- run: go install ./cmd/ipfs-cluster-service
        #- run: go install ./cmd/ipfs-cluster-ctl
        #- run: go install ./cmd/ipfs-cluster-follow

jobs:
  truffle_core:
    executor: freeverse
    steps:
      - checkout
      - run: cd truffle-core && npm install
      - run: cd truffle-core && ./node_modules/.bin/truffle compile
      - run: cd truffle-core && ./node_modules/.bin/truffle test
  synchronizer:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - install_and_run_ipfs_cluster
      - run: cd go/contracts && go test 
      - run: cd go/cmd/synchronizer && go build ./synchronizer.go
      - run: cd go/synchronizer/process && go test ./... -v
      - run: cd go/utils && go test ./... -v
      - run: cd go/synchronizer/engine && go test ./... -v
      - run: cd go/synchronizer/staker && go test ./... 
      - run: cd go/synchronizer/matchevents && go test ./... -v
  go1:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - install_and_run_ipfs_cluster
      - run: cd go/useractions && go test ./...
      - run: cd go/marketpay/v1 && go test ./...
      - run: cd go/storage && go test ./...
      - run: cd go/authproxy && go test ./...
      # - run: cd go/testutils && go test ./...
      - run: cd go/names && go test ./...
      - run: cd go/universe && go test ./...
  deployment-test:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - install_kustomize
      - run: kustomize build ./deployment/dok8s/overlays/dev/. | diff ./deployment/dok8s/overlays/dev/testdata/kustomize.golden -
      - run: kustomize build ./deployment/dok8s/overlays/prod/. | diff ./deployment/dok8s/overlays/prod/testdata/kustomize.golden -
  market-notary:
    executor: freeverse_market
    steps:
      - checkout
      - generate_contracts_code
      - submit_market_db_schema
      - run: cd go/cmd/notary && go build ./notary.go
      - run: cd go/notary/auctionmachine && go test ./...
      - run: cd go/notary/bidmachine && go test ./...
      - run: cd go/notary/consumer && go test ./... 
      - run: cd go/notary/producer && go test ./... -p 1
      - run: cd go/notary/signer && go test ./...
      - run: cd go/notary/storage && go test ./...
  relay-actions:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - run: cd go/cmd/relay && go build ./relay.go
      - run: cd go/relay && go test ./...
  market-trader:
    executor: freeverse
    steps:
      - checkout
      - run: cd market.trader && npm install
      - run: cd market.trader && npm test
  universe-api:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: cd universe.api && npm install
      - run: cd universe.api && npm test
  dockerization-development:
    executor: freeverse
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      - run: cd market.trader && docker build -t freeverseio/market.trader:dev .
      - run: cd universe.db && docker build -t freeverseio/universe.db:dev .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:dev .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:dev .
      - run: cd dashboard && docker build -t freeverseio/dashboard:dev --build-arg REACT_APP_API="https://dashboard.gorengine.com/api" .
      - run: cd market.db && docker build -t freeverseio/market.db:dev .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:dev .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:dev .
      - run: cd go && docker build -f Dockerfile.authproxy -t freeverseio/authproxy:dev .
      - run: cd universe.api && docker build -t freeverseio/universe.api:dev .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer:dev
      - run: docker push freeverseio/horizon:dev
      - run: docker push freeverseio/universe.db:dev
      - run: docker push freeverseio/market.db:dev
      - run: docker push freeverseio/market.trader:dev
      - run: docker push freeverseio/market.notary:dev
      - run: docker push freeverseio/universe.api:dev
      - run: docker push freeverseio/relay.actions:dev
      - run: docker push freeverseio/authproxy:dev
      - run: docker push freeverseio/dashboard:dev
  dockerization-production:
    executor: freeverse
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      - run: cd market.trader && docker build -t freeverseio/market.trader:${CIRCLE_TAG} .
      - run: cd universe.db && docker build -t freeverseio/universe.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:${CIRCLE_TAG} .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:${CIRCLE_TAG} .
      - run: cd dashboard && docker build -t freeverseio/dashboard:${CIRCLE_TAG} --build-arg REACT_APP_API="https://dashboard.goalrevolution.live/api" .
      - run: cd market.db && docker build -t freeverseio/market.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.authproxy -t freeverseio/authproxy:${CIRCLE_TAG} .
      - run: cd universe.api && docker build -t freeverseio/universe.api:${CIRCLE_TAG} .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer:${CIRCLE_TAG}
      - run: docker push freeverseio/horizon:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.trader:${CIRCLE_TAG}
      - run: docker push freeverseio/market.notary:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.api:${CIRCLE_TAG}
      - run: docker push freeverseio/relay.actions:${CIRCLE_TAG}
      - run: docker push freeverseio/authproxy:${CIRCLE_TAG}
      - run: docker push freeverseio/dashboard:${CIRCLE_TAG}
  deployk8s:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - kube-orb/install-kubectl
      - kube-orb/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - install_kustomize
      - run: | 
          kustomize build deployment/dok8s/overlays/dev | kubectl -n freeverse delete -f -
          kustomize build deployment/dok8s/overlays/dev | kubectl -n freeverse apply -f -
workflows:
  version: 2
  build_and_test:
    jobs:
      - truffle_core:
          filters:
            tags:
              only: /.*/
      - synchronizer:
          filters:
            tags:
              only: /.*/
      - go1:
          filters:
            tags:
              only: /.*/
      - market-trader:
          filters:
            tags:
              only: /.*/
      - universe-api:
          filters:
            tags:
              only: /.*
      - relay-actions:
          filters:
            tags:
              only: /.*/
      - market-notary:
          filters:
            tags:
              only: /.*/
      - deployment-test:
          filters:
            tags:
              only: /.*/
      - dockerization-development:
          filters:
           branches:
              only:
                - dev
          requires:
            - synchronizer
            - market-trader
            - relay-actions
            - market-notary
            - go1
            - deployment-test
            - universe-api
      - dockerization-production:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+(.+)?/
            branches:
              ignore: /.*/
          requires:
            - synchronizer
            - market-trader
            - relay-actions
            - market-notary
            - go1
            - deployment-test
            - universe-api
      - deployk8s:
          filters:
           branches:
              only:
                - dev
          requires:
            - dockerization-development
            - truffle_core

