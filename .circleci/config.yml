:#: Javascript Node CircleCI 2.1 configuration file
version: 2.1

orbs:
  kube-orb: circleci/kubernetes@0.11.0

environment:
  PATH: >-
    /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/local/go/bin:/go/bin

executors:
  freeverse:
    docker:
      - image: freeverseio/circleci
  freeverse_ethereum:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/xdai:dev
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
      - image: postgres:12.4-alpine
        environment:
          - POSTGRES_USER=freeverse
          - POSTGRES_PASSWORD=freeverse
          - POSTGRES_DB=cryptosoccer
      - image: ipfs/go-ipfs:v0.6.0
        environment:
          - IPFS_PROFILE=test
  freeverse_market:
    docker:
      - image: freeverseio/circleci
      - image: freeverseio/xdai:dev
        auth:
          username: $DOCKER_ID
          password: $DOCKER_PASSWD
      - image: postgres:12.4-alpine
        environment:
          - POSTGRES_USER=freeverse
          - POSTGRES_PASSWORD=freeverse
          - POSTGRES_DB=market

commands:
  submit_universe_db_schema:
    description: "Submit cryptosoccer schema in database"
    steps:
      - run: cd universe.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d cryptosoccer -h localhost -p 5432 -f $f; done
  submit_market_db_schema:
    description: "Submit cryptosoccer schema in database"
    steps:
      - run: cd market.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d market -h localhost -p 5432 -f $f; done
  generate_contracts_code:
    description: "Compile and generate code for the services that need to communicate with them"
    steps:
      - run: make setup contracts
  install_kustomize:
    description: "Install kustomize"
    steps:
      - run: wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.5.4/kustomize_v3.5.4_linux_amd64.tar.gz
      - run: tar xvzf ./kustomize_v3.5.4_linux_amd64.tar.gz
      - run: rm ./kustomize_v3.5.4_linux_amd64.tar.gz
      - run: chmod +x ./kustomize
      - run: sudo mv ./kustomize /usr/local/bin
  install_ipfs_cluster:
    steps:
      - run:
          name: "compiling ipfs-cluster"
          command: |
            set -x
            wget https://github.com/ipfs/ipfs-cluster/archive/v0.13.0.tar.gz
            tar -zxvf v0.13.0.tar.gz
            cd ipfs-cluster-0.13.0/cmd/ipfs-cluster-service
            export GO111MODULE=on
            go build -a -ldflags '-w -extldflags "-static"'
            mv ipfs-cluster-service /usr/local/bin
            ipfs-cluster-service init

jobs:
  dashboard:
    executor: freeverse
    steps:
      - checkout
      - generate_contracts_code
      - run: cd dashboard && npm ci
      - run: cd dashboard && npm test -- --ci
  gamelayer:
    executor: freeverse
    steps:
      - checkout
      - run: cd nodejs-gamelayer && npm ci
      - run: cd nodejs-gamelayer && npm run lint
      - run: cd nodejs-gamelayer && npm run test
      - run: cd nodejs-gamelayer-webhook && npm ci
      - run: cd nodejs-gamelayer-webhook && npm run lint
  market-read-api:
    executor: freeverse
    steps:
      - checkout
      - run: cd market-read-api && npm ci
      - run: cd market-read-api && npm run lint
  gamelayer-mailbox-cron:
    executor: freeverse
    steps:
      - checkout
      - run: cd nodejs-gamelayer-mailbox-cron && npm ci
      - run: cd nodejs-gamelayer-mailbox-cron && npm run lint
      - run: cd nodejs-gamelayer-mailbox-cron && npm run test
  truffle_core:
    executor: freeverse
    parallelism: 20
    steps:
      - checkout
      - run: cd truffle-core && npm ci
      - run: cd truffle-core && ./node_modules/.bin/truffle compile
      - run:
          command: |
            cd truffle-core
            circleci tests glob "test/*.js" | circleci tests split --split-by=timings > /tmp/tests-to-run
            cat /tmp/tests-to-run
            ./node_modules/.bin/truffle test $(cat /tmp/tests-to-run)
      # - store_test_results:
      #     path: ~/reports
  synchronizer:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - install_ipfs_cluster
      - run: cd go/cmd/synchronizer && go build ./synchronizer.go
      - run:
          command: |
            set -e
            set -x
            ipfs-cluster-service daemon& 
            cd go/synchronizer/process
            go test ./... -v
      - run: cd go/utils && go test ./... -v
      - run: cd go/synchronizer/engine && go test ./... -v
      - run: cd go/synchronizer/staker && go test ./...
      - run: cd go/synchronizer/matchevents && go test ./... -v
      - run: cd go/synchronizer/leaderboard && go test ./... -v
  go1:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - install_ipfs_cluster
      - run:
          command: |
            set -e
            set -x
            ipfs-cluster-service daemon& 
            cd go/useractions
            go test ./...
      - run: cd go/contracts && go test ./... -p 1
      - run: cd go/marketpay/v1 && go test ./...
      - run: cd go/storage && go test ./...
      - run: cd go/authproxy && go test ./...
      # - run: cd go/testutils && go test ./...
      - run: cd go/names && go test ./...
      - run: cd go/universe && go test ./...
  deployment-test:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - install_kustomize
      - run: kustomize build ./deployment/dok8s/overlays/dev/. | diff ./deployment/dok8s/overlays/dev/testdata/kustomize.golden -
      - run: kustomize build ./deployment/dok8s/overlays/prod/. | diff ./deployment/dok8s/overlays/prod/testdata/kustomize.golden -
  market-notary:
    executor: freeverse_market
    steps:
      - checkout
      - generate_contracts_code
      - submit_market_db_schema
      - run: cd go/cmd/notary && go build ./notary.go
      - run: cd go/notary/auctionmachine && go test ./...
      - run: cd go/notary/bidmachine && go test ./...
      - run: cd go/notary/consumer && go test ./...
      - run: cd go/notary/producer && go test ./... -p 1
      - run: cd go/notary/signer && go test ./...
      - run: cd go/notary/storage && go test ./...
      - run: cd go/notary/worldplayer && go test ./...
  relay-actions:
    executor: freeverse_ethereum
    steps:
      - checkout
      - generate_contracts_code
      - submit_universe_db_schema
      - run: cd go/cmd/relay && go build ./relay.go
      - run: cd go/relay && go test ./... -p 1
  universe-api:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: cd universe.api && npm install
      - run: cd universe.api && npm test
  purchasevoider: 
    docker:
      - image: circleci/golang:1.15
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: freeverse
          POSTGRES_PASSWORD: freeverse
          POSTGRES_DB: freeverse
    steps:
      - attach_workspace:
          at: .
      - run: sudo apt-get install -yy postgresql-client
      - run: | 
          PGPASSWORD=freeverse psql -U freeverse -h localhost -p 5432 -c 'CREATE DATABASE cryptosoccer'
          cd universe.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d cryptosoccer -h localhost -p 5432 -f $f; done
      - run: | 
          PGPASSWORD=freeverse psql -U freeverse -h localhost -p 5432 -c 'CREATE DATABASE market'
          cd market.db && for f in *.sql; do PGPASSWORD=freeverse psql -U freeverse -d market -h localhost -p 5432 -f $f; done
      - run: cd go/purchasevoider && go test ./... -v 
  dockerization-development:
    executor: freeverse
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker: # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      # create the latest images
      - run: cd market.trader && docker build -t freeverseio/market.trader:dev -t freeverseio/market.trader:${CIRCLE_SHA1} .
      - run: cd universe.db && docker build -t freeverseio/universe.db:dev -t freeverseio/universe.db:${CIRCLE_SHA1} .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:dev -t freeverseio/relay.actions:${CIRCLE_SHA1} .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:dev -t freeverseio/horizon:${CIRCLE_SHA1} .
      - run: cd dashboard && docker build -t freeverseio/dashboard:dev -t freeverseio/dashboard:${CIRCLE_SHA1} --build-arg REACT_APP_API="https://dashboard.gorengine.com/api" .
      - run: cd market.db && docker build -t freeverseio/market.db:dev -t freeverseio/market.db:${CIRCLE_SHA1} .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:dev -t freeverseio/synchronizer:${CIRCLE_SHA1} .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:dev -t freeverseio/market.notary:${CIRCLE_SHA1} .
      - run: cd go && docker build -f Dockerfile.authproxy -t freeverseio/authproxy:dev -t freeverseio/authproxy:${CIRCLE_SHA1} .
      - run: cd universe.api && docker build -t freeverseio/universe.api:dev -t freeverseio/universe.api:${CIRCLE_SHA1} .
      - run: cd game.db && docker build -t freeverseio/game.db:dev -t freeverseio/game.db:${CIRCLE_SHA1} .
      - run: cd nodejs-gamelayer && docker build -t freeverseio/gamelayer:dev -t freeverseio/gamelayer:${CIRCLE_SHA1} .
      - run: cd nodejs-gamelayer-webhook && docker build -t freeverseio/gamelayer.webhook:dev -t freeverseio/gamelayer.webhook:${CIRCLE_SHA1} .
      - run: cd market-read-api && docker build -t freeverseio/market.read.api:dev -t freeverseio/market.read.api:${CIRCLE_SHA1} .
      - run: cd nodejs-gamelayer-mailbox-cron && docker build -t freeverseio/gamelayer.mailbox.cron:dev -t freeverseio/gamelayer.mailbox.cron:${CIRCLE_SHA1} .

      # push images
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer
      - run: docker push freeverseio/horizon
      - run: docker push freeverseio/universe.db
      - run: docker push freeverseio/market.db
      - run: docker push freeverseio/market.trader
      - run: docker push freeverseio/market.notary
      - run: docker push freeverseio/universe.api
      - run: docker push freeverseio/relay.actions
      - run: docker push freeverseio/authproxy
      - run: docker push freeverseio/dashboard
      - run: docker push freeverseio/game.db
      - run: docker push freeverseio/gamelayer
      - run: docker push freeverseio/gamelayer.webhook
      - run: docker push freeverseio/market.read.api
      - run: docker push freeverseio/gamelayer.mailbox.cron

  dockerization-production:
    executor: freeverse
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker: # (2)
          docker_layer_caching: true # (3)
      - generate_contracts_code
      - run: cd market.trader && docker build -t freeverseio/market.trader:${CIRCLE_TAG} .
      - run: cd universe.db && docker build -t freeverseio/universe.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.relay -t freeverseio/relay.actions:${CIRCLE_TAG} .
      - run: cd nodejs-horizon && docker build -t freeverseio/horizon:${CIRCLE_TAG} .
      - run: cd dashboard && docker build -t freeverseio/dashboard:${CIRCLE_TAG} --build-arg REACT_APP_API="https://dashboard.goalrevolution.live/api" .
      - run: cd market.db && docker build -t freeverseio/market.db:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.synchronizer -t freeverseio/synchronizer:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.notary -t freeverseio/market.notary:${CIRCLE_TAG} .
      - run: cd go && docker build -f Dockerfile.authproxy -t freeverseio/authproxy:${CIRCLE_TAG} .
      - run: cd universe.api && docker build -t freeverseio/universe.api:${CIRCLE_TAG} .
      - run: cd game.db && docker build -t freeverseio/game.db:${CIRCLE_TAG} .
      - run: cd nodejs-gamelayer && docker build -t freeverseio/gamelayer:${CIRCLE_TAG} .
      - run: cd nodejs-gamelayer-webhook && docker build -t freeverseio/gamelayer.webhook:${CIRCLE_TAG} .
      - run: cd market-read-api && docker build -t freeverseio/market.read.api:${CIRCLE_TAG} .
      - run: cd nodejs-gamelayer-mailbox-cron && docker build -t freeverseio/gamelayer.mailbox.cron:${CIRCLE_TAG} .
      - run: echo $DOCKER_PASSWD | docker login -u $DOCKER_ID --password-stdin
      - run: docker push freeverseio/synchronizer:${CIRCLE_TAG}
      - run: docker push freeverseio/horizon:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.db:${CIRCLE_TAG}
      - run: docker push freeverseio/market.trader:${CIRCLE_TAG}
      - run: docker push freeverseio/market.notary:${CIRCLE_TAG}
      - run: docker push freeverseio/universe.api:${CIRCLE_TAG}
      - run: docker push freeverseio/relay.actions:${CIRCLE_TAG}
      - run: docker push freeverseio/authproxy:${CIRCLE_TAG}
      - run: docker push freeverseio/dashboard:${CIRCLE_TAG}
      - run: docker push freeverseio/game.db:${CIRCLE_TAG}
      - run: docker push freeverseio/gamelayer:${CIRCLE_TAG}
      - run: docker push freeverseio/gamelayer.webhook:${CIRCLE_TAG}
      - run: docker push freeverseio/market.read.api:${CIRCLE_TAG}
      - run: docker push freeverseio/gamelayer.mailbox.cron:${CIRCLE_TAG}
  deployk8s:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: "v1.16.12"
      - kube-orb/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - install_kustomize
      - run: |
          cd deployment/dok8s/overlays/dev
          kustomize edit set image freeverseio/authproxy:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/dashboard:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/horizon:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/market.db:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/market.notary:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/market.trader:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/relay.actions:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/synchronizer:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/universe.api:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/universe.db:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/game.db:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/gamelayer:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/gamelayer.webhook:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/market.read.api:${CIRCLE_SHA1}
          kustomize edit set image freeverseio/gamelayer.mailbox.cron:${CIRCLE_SHA1}
          kustomize build . -o app.yaml
          cat app.yaml
          kubectl -n freeverse apply -f app.yaml
          rm app.yaml
workflows:
  version: 2
  build_and_test:
    jobs:
      - dashboard:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - gamelayer:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - market-read-api:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - gamelayer-mailbox-cron:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - truffle_core:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - synchronizer:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - go1:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - purchasevoider:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - universe-api:
          context: dockerhub
          filters:
            tags:
              only: /.*
      - relay-actions:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - market-notary:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - deployment-test:
          context: dockerhub
          filters:
            tags:
              only: /.*/
      - dockerization-development:
          context: dockerhub
          filters:
            branches:
              only:
                - dev
          requires:
            - synchronizer
            - relay-actions
            - market-notary
            - go1
            - deployment-test
            - universe-api
            - dashboard
            - purchasevoider
      - dockerization-production:
          context: dockerhub
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+(.+)?/
            branches:
              ignore: /.*/
          requires:
            - synchronizer
            - relay-actions
            - market-notary
            - go1
            - deployment-test
            - universe-api
            - dashboard
            - purchasevoider
      - deployk8s:
          filters:
            branches:
              only:
                - dev
          requires:
            - dockerization-development
            - truffle_core
