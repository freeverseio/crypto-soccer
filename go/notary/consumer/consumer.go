package consumer

import (
	"database/sql"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/notary/producer/gql"
	log "github.com/sirupsen/logrus"
)

type Consumer struct {
	ch              chan interface{}
	client          *ethclient.Client
	auth            *bind.TransactOpts
	updatesContract *updates.Updates
	assetsContract  *assets.Assets
	ipfsURL         string
	db              *sql.DB
}

func NewConsumer(
	ch chan interface{},
	client *ethclient.Client,
	auth *bind.TransactOpts,
	updatesContract *updates.Updates,
	assetsContract *assets.Assets,
	ipfsURL string,
	db *sql.DB,
) *Consumer {
	return &Consumer{
		ch,
		client,
		auth,
		updatesContract,
		assetsContract,
		ipfsURL,
		db,
	}
}

func (b *Consumer) Start() {
	for {
		event := <-b.ch
		switch event.(type) {
		case gql.CreateAuctionInput:
			log.Debug("Received CreateAuctionInput")
		case gql.CancelAuctionInput:
			log.Debug("Received CancelAuctionInput")
		case gql.CreateBidInput:
			log.Debug("Received CreateBidInput")
		default:
			log.Errorf("unknown event: %v", event)
		}
	}
}
