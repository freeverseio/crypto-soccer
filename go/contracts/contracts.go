package contracts

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/market"
	log "github.com/sirupsen/logrus"
)

type Contracts struct {
	Client *ethclient.Client
	Market *market.Market
}

func New(
	clientURL string,
	marketAddress string,
) (*Contracts, error) {
	contracts := Contracts{}
	log.Info("Dial the Ethereum client: ", clientURL)
	client, err := ethclient.Dial(clientURL)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	log.Info("Creating Market bindings to: ", marketAddress)
	market, err := market.NewMarket(common.HexToAddress(marketAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	contracts.Client = client
	contracts.Market = market
	return &contracts, nil
}
