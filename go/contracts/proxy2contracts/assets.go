package proxy2contracts

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
)

type Assets struct {
	assets.Assets
}

func NewAssets(address common.Address, backend bind.ContractBackend) (*Assets, error) {
	c, err := assets.NewAssets(address, backend)
	if err != nil {
		return nil, err
	}
	return &Assets{*c}, nil
}

func (b *Assets) GetForwardness(opts *bind.CallOpts, encodedSkills *big.Int) (*big.Int, error) {
	result := getForwardnessGo(encodedSkills)
	return result, nil
}

func (b *Assets) GetLeftishness(opts *bind.CallOpts, encodedSkills *big.Int) (*big.Int, error) {
	result := getLeftishnessGo(encodedSkills)
	return result, nil
}

func (b *Assets) EncodeTZCountryAndVal(opts *bind.CallOpts, timeZone uint8, countryIdxInTZ *big.Int, val *big.Int) (*big.Int, error) {
	result, err := encodeTZCountryAndValGo(timeZone, countryIdxInTZ, val)
	return result, err
}

func (b *Assets) GetCurrentShirtNum(opts *bind.CallOpts, playerState *big.Int) (*big.Int, error) {
	result := getCurrentShirtNumGo(playerState)
	return result, nil
}

func (b *Assets) GetGeneration(opts *bind.CallOpts, encodedSkills *big.Int) (*big.Int, error) {
	result := getGenerationGo(encodedSkills)
	return result, nil
}
