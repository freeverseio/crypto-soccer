package proxy2contracts

import (
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/utils"
)

type Utils struct {
	utils.Utils
}

// NewUtils creates a new instance of Utils, bound to a specific deployed contract.
func NewUtils(address common.Address, backend bind.ContractBackend) (*Utils, error) {
	c, err := utils.NewUtils(address, backend)
	if err != nil {
		return nil, err
	}
	return &Utils{*c}, nil
}

// func (b *Utils) FullDecodeSkills(opts *bind.CallOpts, encodedSkills *big.Int) (struct {
// 	Skills                                                 [5]uint32
// 	DayOfBirth                                             uint16
// 	BirthTraits                                            [4]uint8
// 	PlayerId                                               *big.Int
// 	Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st [5]bool
// 	GenerationGamesNonStopInjuryWeeks                      [3]uint8
// }, error) {
// 	log.Warning("Not implemented")

// 	result := struct {
// 		Skills                                                 [5]uint32
// 		DayOfBirth                                             uint16
// 		BirthTraits                                            [4]uint8
// 		PlayerId                                               *big.Int
// 		Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st [5]bool
// 		GenerationGamesNonStopInjuryWeeks                      [3]uint8
// 	}{}
// 	result.PlayerId = big.NewInt(0)
// 	getF(result.PlayerId)

// 	return result, nil
// }
