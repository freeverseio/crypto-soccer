package proxy2contracts

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/utils"
)

type Utils struct {
	utils.Utils
}

// NewUtils creates a new instance of Utils, bound to a specific deployed contract.
func NewUtils(address common.Address, backend bind.ContractBackend) (*Utils, error) {
	c, err := utils.NewUtils(address, backend)
	if err != nil {
		return nil, err
	}
	return &Utils{*c}, nil
}

func (b *Utils) FullDecodeSkills(opts *bind.CallOpts, encodedSkills *big.Int) (struct {
	Skills                                                 [5]uint32
	DayOfBirth                                             uint16
	BirthTraits                                            [4]uint8
	PlayerId                                               *big.Int
	Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st [5]bool
	GenerationGamesNonStopInjuryWeeks                      [3]uint8
}, error) {

	result := struct {
		Skills                                                 [5]uint32
		DayOfBirth                                             uint16
		BirthTraits                                            [4]uint8
		PlayerId                                               *big.Int
		Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st [5]bool
		GenerationGamesNonStopInjuryWeeks                      [3]uint8
	}{}

	N_SKILLS := uint8(5)
	for sk := uint8(0); sk < N_SKILLS; sk++ {
		result.Skills[sk] = uint32(getSkillGo(encodedSkills, sk).Uint64())
	}
	result.DayOfBirth = uint16(getBirthDayGo(encodedSkills).Uint64())

	result.BirthTraits[0] = uint8(getPotentialGo(encodedSkills).Uint64())
	result.BirthTraits[1] = uint8(getForwardnessGo(encodedSkills).Uint64())
	result.BirthTraits[2] = uint8(getLeftishnessGo(encodedSkills).Uint64())
	result.BirthTraits[3] = uint8(getAggressivenessGo(encodedSkills).Uint64())

	result.PlayerId = getPlayerIdFromSkillsGo(encodedSkills)

	result.Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st[0] = getAlignedEndOfFirstHalfGo(encodedSkills)
	result.Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st[1] = getSubstitutedFirstHalfGo(encodedSkills)
	result.Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st[2] = getRedCardLastGameGo(encodedSkills)
	result.Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st[3] = getOutOfGameFirstHalfGo(encodedSkills)
	result.Aligned1stSubst1stRedCardLastGameOutOfGame1stYellow1st[4] = getYellowCardFirstHalfGo(encodedSkills)

	result.GenerationGamesNonStopInjuryWeeks[0] = uint8(getGenerationGo(encodedSkills).Uint64())
	result.GenerationGamesNonStopInjuryWeeks[1] = getGamesNonStoppingGo(encodedSkills)
	result.GenerationGamesNonStopInjuryWeeks[2] = getInjuryWeeksLeftGo(encodedSkills)
	return result, nil
}
