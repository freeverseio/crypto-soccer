package contracts_test

import (
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"gotest.tools/assert"
)

func TestAssetsProxyGetSpeed(t *testing.T) {
	tcs := []uint16{0, 2, 0xffff - 1, 0xffff}
	assets, err := assets.NewAssets(common.HexToAddress(bc.Contracts.AssetsAddress), bc.Contracts.Client)
	assert.NilError(t, err)
	native := contracts.AssetsNative{}
	native.Assets = *assets
	for _, tc := range tcs {
		t.Run(fmt.Sprintf("%d", tc), func(t *testing.T) {
			skills, err := assets.EncodePlayerSkills(
				&bind.CallOpts{},
				[5]uint16{0xffff, tc, 0xffff, 0xffff, 0xffff},
				big.NewInt(0),
				0,
				big.NewInt(1),
				[4]uint8{0, 0, 0, 0},
				false,
				false,
				0,
				0,
				false,
				0,
			)
			assert.NilError(t, err)
			result, err := assets.GetSpeed(&bind.CallOpts{}, skills)
			assert.NilError(t, err)
			nativeResult, err := native.GetSpeed(&bind.CallOpts{}, skills)
			assert.NilError(t, err)
			assert.Equal(t, result.String(), nativeResult.String())
			assert.Equal(t, uint16(result.Uint64()), tc)
		})
	}
}

func TestAssetsProxyGetPass(t *testing.T) {
	tcs := []uint16{0, 2, 0xffff - 1, 0xffff}
	assets, err := assets.NewAssets(common.HexToAddress(bc.Contracts.AssetsAddress), bc.Contracts.Client)
	assert.NilError(t, err)
	native := contracts.AssetsNative{}
	native.Assets = *assets
	for _, tc := range tcs {
		t.Run(fmt.Sprintf("%d", tc), func(t *testing.T) {
			skills, err := assets.EncodePlayerSkills(
				&bind.CallOpts{},
				[5]uint16{0xffff, 0xffff, tc, 0xffff, 0xffff},
				big.NewInt(0),
				0,
				big.NewInt(1),
				[4]uint8{0, 0, 0, 0},
				false,
				false,
				0,
				0,
				false,
				0,
			)
			assert.NilError(t, err)
			result, err := assets.GetPass(&bind.CallOpts{}, skills)
			assert.NilError(t, err)
			nativeResult, err := native.GetPass(&bind.CallOpts{}, skills)
			assert.NilError(t, err)
			assert.Equal(t, result.String(), nativeResult.String())
			assert.Equal(t, uint16(result.Uint64()), tc)
		})
	}
}
