package main

import (
	"database/sql"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/names"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/process"
	"github.com/freeverseio/crypto-soccer/go/testutils"
	"github.com/freeverseio/crypto-soccer/go/useractions"
	"github.com/freeverseio/crypto-soccer/go/useractions/ipfs"
	log "github.com/sirupsen/logrus"
)

var universedb *sql.DB
var bc *testutils.BlockchainNode
var namesdb *names.Generator
var useractionsPublishService useractions.UserActionsPublishService

func main() {
	universedb, err := storage.New("postgres://freeverse:freeverse@localhost:5432/cryptosoccer?sslmode=disable")
	if err != nil {
		log.Fatal(err)
	}
	bc, err = testutils.NewBlockchain()
	if err != nil {
		log.Fatal(err)
	}
	useractionsPublishService = ipfs.NewUserActionsPublishService("/ip4/127.0.0.1/tcp/5001")

	tx, err := universedb.Begin()
	if err != nil {
		log.Fatal(err)
	}
	defer tx.Commit()

	namesdb, err := names.New("../../names/sql/names.db")
	processDivision := process.NewDivisionCreationProcessor(bc.Contracts, namesdb)

	timezone := uint8(10)
	event := assets.AssetsDivisionCreation{
		Timezone:             timezone,
		CountryIdxInTZ:       big.NewInt(0),
		DivisionIdxInCountry: big.NewInt(0),
	}

	verse := storage.Verse{}
	verse.VerseNumber = 12914
	verse.Root = "ciao"

	teamcount, err := storage.TeamCount(tx)
	log.Infof("Aqui hay %v teams", teamcount)

	for numDivisions := int64(16); numDivisions < 176; numDivisions++ {
		event.DivisionIdxInCountry = big.NewInt(numDivisions)
		processDivision.Process(tx, event)
	}

	teamcount, err = storage.TeamCount(tx)
	log.Infof("Aqui hay %v teams", teamcount)

	//////////////	ahora shuffleo tz 10 con los nuevos tems
	timezoneIdx2 := uint8(9)
	processorLeague := process.NewLeagueProcessor(bc.Contracts, useractionsPublishService)
	day2 := uint8(0)
	seed := [32]byte{0x2}
	turnInDay := uint8(0)
	gameDeployDay, err := bc.Contracts.Assets.GameDeployDay(&bind.CallOpts{})
	actionsSubmissionTime := gameDeployDay.Int64() * 24 * 3600
	ua2 := useractions.UserActions{}
	cid, err := useractionsPublishService.Publish(ua2)
	root, err := ua2.Root()
	err = processorLeague.Process(tx, updates.UpdatesActionsSubmission{
		big.NewInt(12913),
		timezoneIdx2,
		day2,
		turnInDay,
		seed,
		big.NewInt(actionsSubmissionTime),
		root,
		cid,
		types.Log{BlockNumber: 1000},
	})
}
