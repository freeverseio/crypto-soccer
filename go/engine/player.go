package engine

import (
	"fmt"
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/storage"
)

type Player struct {
	storage.Player
}

func NewNullPlayer() *Player {
	player := Player{}
	player.EncodedSkills = big.NewInt(0)
	return &player
}

func NewPlayer(
	contracts *contracts.Contracts,
	playerID *big.Int,
	defence uint16,
	speed uint16,
	endurance uint16,
	pass uint16,
	shoot uint16,
	dayOfBirthUnix uint16,
	generation uint8,
	potential uint8,
	forwardness uint8,
	leftishness uint8,
	aggressiveness uint8,
	alignedEndOfLastHalf bool,
	redCardLastGame bool,
	gamesNonStopping uint8,
	injuryWeeksLeft uint8,
	substitutedLastHalf bool,
) (*Player, error) {
	var err error
	player := Player{}
	sumSkills := uint32(defence) + uint32(speed) + uint32(endurance) + uint32(pass) + uint32(shoot)
	player.EncodedSkills, err = contracts.Engine.EncodePlayerSkills(
		&bind.CallOpts{},
		[5]uint16{shoot, speed, pass, defence, endurance},
		big.NewInt(int64(dayOfBirthUnix)),
		generation,
		playerID,
		[4]uint8{potential, forwardness, leftishness, aggressiveness},
		alignedEndOfLastHalf,
		redCardLastGame,
		gamesNonStopping,
		injuryWeeksLeft,
		substitutedLastHalf,
		sumSkills,
	)
	return &player, err
}

func NewPlayerFromSkills(skills string) *Player {
	var player Player
	player.EncodedSkills, _ = new(big.Int).SetString(skills, 10)
	return &player
}

func (b *Player) SetAligned(contracts contracts.Contracts, aligned bool) error {
	var err error
	b.EncodedSkills, err = contracts.Evolution.SetAlignedEndOfLastHalf(
		&bind.CallOpts{},
		b.EncodedSkills,
		aligned,
	)
	return err
}

func (b *Player) SetRedCard(contracts contracts.Contracts, redCard bool) error {
	var err error
	b.EncodedSkills, err = contracts.Evolution.SetRedCardLastGame(
		&bind.CallOpts{},
		b.EncodedSkills,
		redCard,
	)
	return err
}

func (b *Player) SetInjuryWeeks(contracts contracts.Contracts, weeks uint8) error {
	var err error
	b.EncodedSkills, err = contracts.Evolution.SetInjuryWeeksLeft(
		&bind.CallOpts{},
		b.EncodedSkills,
		weeks,
	)
	return err
}

func (b Player) DumpState() string {
	return fmt.Sprintf("skills: %v", b.EncodedSkills)
}

func (b Player) Skills() *big.Int {
	return new(big.Int).Set(b.EncodedSkills)
}

func (b Player) Defence(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetDefence(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Speed(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetSpeed(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Pass(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetPass(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}
func (b Player) Shoot(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetShoot(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Endurance(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetEndurance(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Potential(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetPotential(opts, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) BirthDayUnix(assets *assets.Assets) (uint16, error) {
	birthDayUnix, err := assets.GetBirthDay(&bind.CallOpts{}, b.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(birthDayUnix.Uint64()), nil
}

func PlayerAge(birthDayUnix uint16) uint16 {
	nowInDays := time.Now().Unix() / 3600 / 24
	age := uint16((nowInDays - int64(birthDayUnix)) * 7 / 365)
	return age
}
