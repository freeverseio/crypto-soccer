package engine

import (
	"database/sql"
	"fmt"
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/storage"
)

type Player struct {
	sto storage.Player
}

func NewNullPlayer() *Player {
	player := Player{}
	player.sto.EncodedSkills = big.NewInt(0)
	return &player
}

func (b Player) IsNull() bool {
	return b.sto.EncodedSkills.Cmp(big.NewInt(0)) == 0
}

func (b Player) ToStorage(contracts contracts.Contracts, tx *sql.Tx) error {
	if b.IsNull() {
		return nil
	}
	if err := b.decodeSkills(contracts); err != nil {
		return err
	}
	return b.sto.Update(tx)
}

func NewPlayer(
	contracts contracts.Contracts,
	playerID *big.Int,
	defence uint16,
	speed uint16,
	endurance uint16,
	pass uint16,
	shoot uint16,
	dayOfBirthUnix uint16,
	generation uint8,
	potential uint8,
	forwardness uint8,
	leftishness uint8,
	aggressiveness uint8,
	alignedEndOfLastHalf bool,
	redCardLastGame bool,
	gamesNonStopping uint8,
	injuryWeeksLeft uint8,
	substitutedLastHalf bool,
) (*Player, error) {
	var err error
	player := Player{}
	sumSkills := uint32(defence) + uint32(speed) + uint32(endurance) + uint32(pass) + uint32(shoot)
	player.sto.EncodedSkills, err = contracts.Engine.EncodePlayerSkills(
		&bind.CallOpts{},
		[5]uint16{shoot, speed, pass, defence, endurance},
		big.NewInt(int64(dayOfBirthUnix)),
		generation,
		playerID,
		[4]uint8{potential, forwardness, leftishness, aggressiveness},
		alignedEndOfLastHalf,
		redCardLastGame,
		gamesNonStopping,
		injuryWeeksLeft,
		substitutedLastHalf,
		sumSkills,
	)
	if err != nil {
		return nil, err
	}
	err = player.decodeSkills(contracts)
	return &player, err
}

func NewPlayerFromSkills(skills string) *Player {
	var player Player
	player.sto.EncodedSkills, _ = new(big.Int).SetString(skills, 10)
	return &player
}

func (b Player) DumpState() string {
	return fmt.Sprintf("skills: %v", b.sto.EncodedSkills)
}

func (b Player) Skills() *big.Int {
	return new(big.Int).Set(b.sto.EncodedSkills)
}

func (b *Player) decodeSkills(contracts contracts.Contracts) error {
	defence, speed, pass, shoot, endurance, potential, dayOfBirth, err := contracts.DecodeSkills(b.sto.EncodedSkills)
	if err != nil {
		return err
	}
	b.sto.Defence = defence.Uint64()
	b.sto.Speed = speed.Uint64()
	b.sto.Pass = pass.Uint64()
	b.sto.Shoot = shoot.Uint64()
	b.sto.Endurance = endurance.Uint64()
	b.sto.Potential = potential.Uint64()
	b.sto.DayOfBirth = dayOfBirth.Uint64()
	return nil
}

func (b Player) Defence(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetDefence(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Speed(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetSpeed(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Pass(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetPass(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}
func (b Player) Shoot(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetShoot(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Endurance(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetEndurance(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) Potential(assets *assets.Assets) (uint16, error) {
	opts := &bind.CallOpts{}
	value, err := assets.GetPotential(opts, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(value.Uint64()), nil
}

func (b Player) BirthDayUnix(assets *assets.Assets) (uint16, error) {
	birthDayUnix, err := assets.GetBirthDay(&bind.CallOpts{}, b.sto.EncodedSkills)
	if err != nil {
		return 0, err
	}
	return uint16(birthDayUnix.Uint64()), nil
}

func PlayerAge(birthDayUnix uint16) uint16 {
	nowInDays := time.Now().Unix() / 3600 / 24
	age := uint16((nowInDays - int64(birthDayUnix)) * 7 / 365)
	return age
}
