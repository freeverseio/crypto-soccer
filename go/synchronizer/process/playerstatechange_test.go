package process_test

import (
	"math/big"
	"testing"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/market"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/process"
)

func TestNewSpecialPlayer(t *testing.T) {
	t.Parallel()
	tx, err := universedb.Begin()
	if err != nil {
		t.Fatal(err)
	}
	defer tx.Rollback()

	timezoneIdx := uint8(0)
	countryIdx := uint32(0)
	leagueIdx := uint32(0)
	var team storage.Team
	team.TeamID = "1"
	team.TimezoneIdx = timezoneIdx
	team.CountryIdx = countryIdx
	team.Owner = "ciao"
	team.LeagueIdx = leagueIdx
	timezone := storage.Timezone{timezoneIdx}
	timezone.Insert(tx)
	country := storage.Country{timezone.TimezoneIdx, countryIdx}
	country.Insert(tx)
	league := storage.League{timezoneIdx, countryIdx, leagueIdx}
	league.Insert(tx)
	team.Insert(tx)

	playerId, _ := new(big.Int).SetString("57896044618658097711785541940796869142293638854084229290456062565102128021503", 10)
	state, _ := new(big.Int).SetString("1", 10)
	player, err := process.GeneratePlayerByPlayerIdAndState(bc.Contracts, 0, playerId, state)
	if err != nil {
		t.Fatal(err)
	}

	event := market.MarketPlayerStateChange{}
	event.PlayerId = playerId
	event.State = state
	if err = process.PlayerStateChangeProcess(tx, bc.Contracts, event); err != nil {
		t.Fatal(err)
	}
	result, err := storage.PlayerByPlayerId(tx, playerId)
	if err != nil {
		t.Fatal(err)
	}

	if !result.Equal(*player) {
		t.Fatalf("Expected %v got %v", player, result)
	}
}
