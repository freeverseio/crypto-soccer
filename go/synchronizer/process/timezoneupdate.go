package process

import (
	"database/sql"
	"encoding/hex"
	"fmt"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/storage"
	log "github.com/sirupsen/logrus"
)

func ConsumeTimezoneUpdate(tx *sql.Tx, event updates.UpdatesTimeZoneUpdate) error {
	root := hex.EncodeToString(event.Root[:])
	log.Infof("[processor|consume] TimezoneUpdate verse: %v, tz: %v, root: %v", event.Verse, event.TimeZone, root)

	verse, err := storage.VerseByNumber(tx, event.Verse.Int64())
	if err != nil {
		return err
	}
	if verse == nil {
		return fmt.Errorf("unexistent hash for verse %v", event.Verse.Int64())
	}

	if verse.Root != hex.EncodeToString(event.Root[:]) {
		return fmt.Errorf("******* CRITIC verse %v hash mistmatch: bc %v, local %v ********", event.Verse, root, verse.Root)
	}
	return nil
}
