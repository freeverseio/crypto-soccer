package process

import (
	"database/sql"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/market"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/utils"
	log "github.com/sirupsen/logrus"
)

func PlayerStateChangeProcess(
	tx *sql.Tx,
	contracts *contracts.Contracts,
	event market.MarketPlayerStateChange,
) error {
	playerID := event.PlayerId
	state := event.State
	player, err := storage.PlayerByPlayerId(tx, playerID)
	if err != nil {
		return err
	}
	if player == nil {
		log.Infof("BIRTH ... player ID %v state %v", playerID, state)
		if player, err = GeneratePlayerByPlayerIdAndState(contracts, event.Raw.BlockNumber, playerID, state); err != nil {
			return err
		}
		return player.Insert(tx, event.Raw.BlockNumber)
	}
	shirtNumber, err := contracts.Assets.GetCurrentShirtNum(&bind.CallOpts{}, state)
	if err != nil {
		return err
	}
	teamID, err := contracts.Assets.GetCurrentTeamId(&bind.CallOpts{}, state)
	if err != nil {
		return err
	}
	player.TeamId = teamID.String()
	player.ShirtNumber = uint8(shirtNumber.Uint64())
	return player.Update(tx, event.Raw.BlockNumber)
}

func GeneratePlayerByPlayerIdAndState(
	contracts *contracts.Contracts,
	blockNumber uint64,
	playerId *big.Int,
	encodedState *big.Int,
) (*storage.Player, error) {
	opts := &bind.CallOpts{}
	if encodedSkills, err := contracts.Assets.GetPlayerSkillsAtBirth(opts, playerId); err != nil {
		return nil, err
	} else if decodedSkills, err := contracts.Utils.FullDecodeSkills(opts, encodedSkills); err != nil {
		return nil, err
	} else if preferredPosition, err := GetPlayerPreferredPosition(contracts, encodedSkills); err != nil {
		return nil, err
	} else if shirtNumber, err := contracts.Assets.GetCurrentShirtNum(opts, encodedState); err != nil {
		return nil, err
		// } else if name, err := namesGenerator.GeneratePlayerFullName(playerId, generation, timezone, countryIdx.Uint64()); err != nil {
		// 	return err
	} else {
		name := "Mr. Awesome"
		teamId, err := contracts.Assets.GetCurrentTeamId(&bind.CallOpts{}, encodedState)
		if err != nil {
			return nil, err
		}
		player := storage.Player{
			PlayerId:          playerId,
			PreferredPosition: preferredPosition,
			Potential:         uint64(decodedSkills.BirthTraits[0]),
			DayOfBirth:        uint64(decodedSkills.DayOfBirth),
			TeamId:            teamId.String(),
			Name:              name,
			Defence:           uint64(decodedSkills.Skills[3]),
			Speed:             uint64(decodedSkills.Skills[1]),
			Pass:              uint64(decodedSkills.Skills[2]),
			Shoot:             uint64(decodedSkills.Skills[0]),
			Endurance:         uint64(decodedSkills.Skills[4]),
			ShirtNumber:       uint8(shirtNumber.Uint64()),
			EncodedSkills:     encodedSkills,
			EncodedState:      encodedState,
			Tiredness:         int(decodedSkills.GenerationGamesNonStopInjuryWeeks[1]),
		}
		return &player, nil
	}
}

func GetPlayerPreferredPosition(contracts *contracts.Contracts, encodedSkills *big.Int) (string, error) {
	opts := &bind.CallOpts{}
	if forwardness, err := contracts.Assets.GetForwardness(opts, encodedSkills); err != nil {
		return "", err
	} else if leftishness, err := contracts.Assets.GetLeftishness(opts, encodedSkills); err != nil {
		return "", err
	} else {
		if forwardness.Uint64() > 255 {
			return "", errors.New("Cannot cast forwardness to uint8: value too large")
		} else if leftishness.Uint64() > 255 {
			return "", errors.New("Cannot cast leftishness to uint8: value too large")
		}
		return utils.PreferredPosition(uint8(forwardness.Uint64()), uint8(leftishness.Uint64()))
	}
}
