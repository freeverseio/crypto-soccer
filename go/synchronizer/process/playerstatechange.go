package process

import (
	"database/sql"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/storage"
)

func PlayerStateChangeProcess(
	tx *sql.Tx,
	contracts *contracts.Contracts,
	event assets.AssetsPlayerStateChange,
) error {
	playerID := event.PlayerId
	state := event.State
	isSpecial, err := contracts.Assets.GetIsSpecial(&bind.CallOpts{}, playerID)
	if err != nil {
		return err
	}
	shirtNumber, err = contracts.Assets.GetCurrentShirtNum(&bind.CallOpts{}, state)
	if err != nil {
		return err
	}
	teamID, err := contracts.Assets.GetCurrentTeamId(&bind.CallOpts{}, state)
	if err != nil {
		return err
	}
	player, err := storage.PlayerByPlayerId(tx, playerID)
	if err != nil {
		return err
	}
	player.State.TeamId = teamID
	player.State.ShirtNumber = uint8(shirtNumber.Uint64())
	return player.Update(tx, playerID, player.State)
}
