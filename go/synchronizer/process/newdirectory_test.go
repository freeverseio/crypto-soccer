package process_test

import (
	"testing"

	"github.com/freeverseio/crypto-soccer/go/synchronizer/process"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/proxy"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"gotest.tools/assert"
)

func TestNewDirectoryStoreTheNewContracts(t *testing.T) {
	t.Parallel()
	tx, err := universedb.Begin()
	assert.NilError(t, err)
	defer tx.Rollback()

	param, err := storage.ParamByName(tx, contracts.DirectoryName)
	assert.NilError(t, err)
	assert.Assert(t, param == nil)

	param, err = storage.ParamByName(tx, contracts.AssetsName)
	assert.NilError(t, err)
	assert.Assert(t, param == nil)

	directoryAddress := bc.Contracts.DirectoryAddress
	event := proxy.ProxyNewDirectory{common.HexToAddress(directoryAddress), types.Log{}}

	_, err = process.ConsumeNewDirectory(tx, *bc.Contracts, event)
	assert.NilError(t, err)

	param, err = storage.ParamByName(tx, contracts.DirectoryName)
	assert.NilError(t, err)
	assert.Equal(t, param.Value, directoryAddress)

	param, err = storage.ParamByName(tx, contracts.AssetsName)
	assert.NilError(t, err)
	assert.Assert(t, param != nil)

}
