package process

import (
	"context"
	"database/sql"
	"errors"
	"math/big"
	"sort"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/engine"
	"github.com/freeverseio/crypto-soccer/go/names"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/storage"

	log "github.com/sirupsen/logrus"
)

type LeagueProcessor struct {
	contracts         *contracts.Contracts
	calendarProcessor *Calendar
	matchProcessor    *MatchProcessor
}

func NewLeagueProcessor(
	contracts *contracts.Contracts,
	namesdb *names.Generator,
) (*LeagueProcessor, error) {
	calendarProcessor, err := NewCalendar(contracts)
	if err != nil {
		return nil, err
	}
	matchProcessor, err := NewMatchProcessor(
		contracts,
		namesdb,
	)
	if err != nil {
		return nil, err
	}
	return &LeagueProcessor{
		contracts,
		calendarProcessor,
		matchProcessor,
	}, nil
}

func FromStorage(
	tx *sql.Tx,
	timezoneIdx uint8,
	day uint8,
) (engine.Matches, error) {
	ms, err := storage.MatchesByTimezoneIdxAndMatchDay(tx, timezoneIdx, day)
	if err != nil {
		return nil, err
	}
	var matches engine.Matches
	for i := range ms {
		m := ms[i]
		homeTeam, err := storage.TeamByTeamId(tx, m.HomeTeamID)
		if err != nil {
			return nil, err
		}
		visitorTeam, err := storage.TeamByTeamId(tx, m.VisitorTeamID)
		if err != nil {
			return nil, err
		}
		homeTeamPlayers, err := storage.PlayersByTeamId(tx, m.HomeTeamID)
		if err != nil {
			return nil, err
		}
		visitorTeamPlayers, err := storage.PlayersByTeamId(tx, m.VisitorTeamID)
		if err != nil {
			return nil, err
		}
		match := engine.NewMatchFromStorage(
			m,
			homeTeam,
			visitorTeam,
			homeTeamPlayers,
			visitorTeamPlayers,
		)
		matches = append(matches, *match)
	}
	return matches, nil
}

func (b *LeagueProcessor) Process(tx *sql.Tx, event updates.UpdatesActionsSubmission) error {
	day := event.Day
	turnInDay := event.TurnInDay
	timezoneIdx := event.TimeZone
	log.Debugf("[LeagueProcessor] Processing timezone %v, day %v, turnInDay %v", timezoneIdx, day, turnInDay)

	if timezoneIdx > 24 {
		return errors.New("[LaegueProcessor] ... wront timezone")
	}

	// get the storage data

	matches, err := FromStorage(tx, timezoneIdx, day)
	if err != nil {
		return err
	}

	switch turnInDay {
	case 0: // first half league match
		matches.Play1stHalfParallel(context.TODO(), *b.contracts)
	case 1: // second half league match
		matches.Play2ndHalfParallel(context.TODO(), *b.contracts)
	default:
		log.Warnf("[LeagueProcessor] ... skipping")
	} // switch

	return matches.ToStorage(tx)
}

func (b *LeagueProcessor) UpdatePrevPerfPointsAndShuffleTeamsInCountry(tx *sql.Tx, timezoneIdx uint8, countryIdx uint32) error {
	log.Infof("[LeagueProcessor] Shuffling timezone %v, country %v", timezoneIdx, countryIdx)
	var orgMap []storage.Team
	leagueCount, err := storage.LeagueByTeimezoneIdxCountryIdx(tx, timezoneIdx, countryIdx)
	if err != nil {
		return err
	}
	for leagueIdx := uint32(0); leagueIdx < leagueCount; leagueIdx++ {
		teams, err := storage.TeamsByTimezoneIdxCountryIdxLeagueIdx(tx, timezoneIdx, countryIdx, leagueIdx)
		if err != nil {
			return err
		}
		// ordening by points
		sort.Slice(teams[:], func(i, j int) bool {
			return teams[i].Points > teams[j].Points
		})
		for position, team := range teams {
			teamState, err := b.GetTeamState(tx, team.TeamID)
			if err != nil {
				return err
			}
			if !storage.IsBotTeam(team) {
				log.Debugf("[LeagueProcessor] Compute team ranking points team %v, teamState %v", team, teamState)
				team.RankingPoints, team.PrevPerfPoints, err = b.contracts.Leagues.ComputeTeamRankingPoints(
					&bind.CallOpts{},
					teamState,
					uint8(position),
					team.PrevPerfPoints,
					team.TeamID,
				)
				if err != nil {
					return err
				}
			}
			log.Debugf("New ranking team %v points %v ranking %v", team.TeamID, team.Points, team.RankingPoints)
			orgMap = append(orgMap, team)
		}
	}
	// ordening all the teams by ranking points
	sort.Slice(orgMap[:], func(i, j int) bool {
		return orgMap[i].RankingPoints > orgMap[j].RankingPoints
	})
	// create the new leagues
	for i, team := range orgMap {
		team.LeagueIdx = uint32(i / 8)
		team.TeamIdxInLeague = uint32(i % 8)
		err = team.Update(tx)
		if err != nil {
			return err
		}
	}
	return nil
}

func (b *LeagueProcessor) GetTeamState(tx *sql.Tx, teamID *big.Int) ([25]*big.Int, error) {
	var state [25]*big.Int
	for i := 0; i < 25; i++ {
		state[i] = big.NewInt(0)
	}
	players, err := storage.PlayersByTeamId(tx, teamID)
	if err != nil {
		return state, err
	}
	for i := 0; i < len(players); i++ {
		player := players[i]
		playerSkills := player.EncodedSkills
		shirtNumber := player.ShirtNumber
		state[shirtNumber] = playerSkills
	}
	return state, nil
}

func (b *LeagueProcessor) resetLeague(tx *sql.Tx, timezoneIdx uint8, countryIdx uint32, leagueIdx uint32) error {
	teams, err := storage.TeamsByTimezoneIdxCountryIdxLeagueIdx(tx, timezoneIdx, countryIdx, leagueIdx)
	if err != nil {
		return err
	}
	for i := 0; i < len(teams); i++ {
		team := teams[i]
		team.D = 0
		team.W = 0
		team.L = 0
		team.GoalsAgainst = 0
		team.GoalsForward = 0
		team.Points = 0
		err = team.Update(tx)
		if err != nil {
			return err
		}
	}
	err = b.calendarProcessor.Reset(tx, timezoneIdx, countryIdx, leagueIdx)
	if err != nil {
		return err
	}
	err = b.calendarProcessor.Populate(tx, timezoneIdx, countryIdx, leagueIdx)
	if err != nil {
		return err
	}
	return nil
}
