package process

import (
	"database/sql"
	"fmt"

	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/storage"
	log "github.com/sirupsen/logrus"
)

type AssetsInitProcessor struct {
	contracts *contracts.Contracts
}

func NewAssetsInitProcessor(contracts *contracts.Contracts) *AssetsInitProcessor {
	return &AssetsInitProcessor{
		contracts,
	}
}

func (b *AssetsInitProcessor) Process(tx *sql.Tx, event assets.AssetsAssetsInit) error {
	log.Infof("[processor|consume] AssetsInit event from account %v", event.CreatorAddr.Hex())

	timezone := storage.Timezone{uint8(0)}
	country := storage.Country{timezone.TimezoneIdx, uint32(0)}
	league := storage.League{timezone.TimezoneIdx, country.CountryIdx, uint32(0)}
	log.Infof("creating timezone %v country %v league %v", timezone.TimezoneIdx, country.CountryIdx, league.LeagueIdx)
	if err := timezone.Insert(tx); err != nil {
		return err
	}
	if err := country.Insert(tx); err != nil {
		return err
	}
	if err := league.Insert(tx); err != nil {
		return err
	}

	// create accademy team
	team := storage.NewTeam()
	team.TeamID = fmt.Sprintf("%d", contracts.AccademyTeamId)
	team.TimezoneIdx = timezone.TimezoneIdx
	team.CountryIdx = country.CountryIdx
	team.Name = "Academy"
	team.Owner = "0x0000000000000000000000000000000000000000"
	team.LeagueIdx = league.LeagueIdx
	team.TeamIdxInLeague = uint32(0)
	log.Infof("creating Academy TeamId %v with owner %v", team.TeamID, team.Owner)
	if err := team.Insert(tx); err != nil {
		return err
	}

	// create in_transit team
	team = storage.NewTeam()
	team.TeamID = fmt.Sprintf("%d", contracts.InTransitTeam)
	team.TimezoneIdx = timezone.TimezoneIdx
	team.CountryIdx = country.CountryIdx
	team.Name = "InTransit"
	team.Owner = "0x0000000000000000000000000000000000000000"
	team.LeagueIdx = league.LeagueIdx
	team.TeamIdxInLeague = uint32(0)
	log.Infof("creating InTransit TeamId %v with owner %v", team.TeamID, team.Owner)
	if err := team.Insert(tx); err != nil {
		return err
	}
	return nil
}
