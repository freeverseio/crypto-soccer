package process_test

import (
	"math/big"
	"testing"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"github.com/freeverseio/crypto-soccer/go/synchronizer/process"
	"github.com/freeverseio/crypto-soccer/go/useractions"
	"gotest.tools/assert"
)

func TestActionsSubmissionFirstHalfEvents(t *testing.T) {
	t.Parallel()
	tx, err := universedb.Begin()
	assert.NilError(t, err)
	defer tx.Rollback()

	timezone := uint8(1)

	divisionCreationEvent := assets.AssetsDivisionCreation{}
	divisionCreationEvent.Timezone = timezone
	divisionCreationEvent.CountryIdxInTZ = big.NewInt(0)
	divisionCreationEvent.DivisionIdxInCountry = big.NewInt(0)
	divisionCreation, err := process.NewDivisionCreationProcessor(bc.Contracts, namesdb)
	assert.NilError(t, err)
	assert.NilError(t, divisionCreation.Process(tx, divisionCreationEvent))

	ua, err := useractions.NewFromStorage(tx, int(timezone))
	assert.NilError(t, err)
	cid, err := ua.ToIpfs(ipfsURL)
	assert.NilError(t, err)
	root, err := ua.Root()
	assert.NilError(t, err)

	count, err := storage.MatchEventCount(tx)
	assert.NilError(t, err)
	assert.Equal(t, count, uint64(0))

	event := updates.UpdatesActionsSubmission{}
	event.Verse = big.NewInt(1)
	event.Seed = [32]byte{0x2}
	event.SubmissionTime = big.NewInt(1589374903)
	event.TimeZone = timezone
	event.TurnInDay = 0
	event.IpfsCid = cid
	event.Root = root
	event.Raw.BlockNumber = 10

	assert.NilError(t, process.ConsumeActionsSubmission(tx, bc.Contracts, ipfsURL, nil, event))
	count, err = storage.MatchEventCount(tx)
	assert.NilError(t, err)
	assert.Equal(t, count, uint64(969))
}
