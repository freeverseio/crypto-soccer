package process

import (
	"database/sql"
	"errors"
	"fmt"
	"math/big"

	"github.com/freeverseio/crypto-soccer/go/names"
	relay "github.com/freeverseio/crypto-soccer/go/storage"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/freeverseio/crypto-soccer/go/contracts"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/storage"
	log "github.com/sirupsen/logrus"
)

type DivisionCreationProcessor struct {
	contracts             *contracts.Contracts
	SK_SHO                uint8
	SK_SPE                uint8
	SK_PAS                uint8
	SK_DEF                uint8
	SK_END                uint8
	LEAGUES_PER_DIV       uint8
	TEAMS_PER_LEAGUE      uint8
	calendarProcessor     *Calendar
	PLAYERS_PER_TEAM_INIT uint8
	namesGenerator        *names.Generator
}

func NewDivisionCreationProcessor(
	contracts *contracts.Contracts,
	namesdb *names.Generator,
) (*DivisionCreationProcessor, error) {
	SK_SHO, err := contracts.ConstantsGetters.GetSKSHO(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	SK_SPE, err := contracts.ConstantsGetters.GetSKSPE(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	SK_PAS, err := contracts.ConstantsGetters.GetSKPAS(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	SK_DEF, err := contracts.ConstantsGetters.GetSKDEF(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	SK_END, err := contracts.ConstantsGetters.GetSKEND(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	LEAGUES_PER_DIV, err := contracts.ConstantsGetters.GetLEAGUESPERDIV(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	TEAMS_PER_LEAGUE, err := contracts.ConstantsGetters.GetTEAMSPERLEAGUE(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	calendarProcessor, err := NewCalendar(contracts)
	if err != nil {
		return nil, err
	}
	PLAYERS_PER_TEAM_INIT, err := contracts.ConstantsGetters.GetPLAYERSPERTEAMINIT(&bind.CallOpts{})
	if err != nil {
		return nil, err
	}
	return &DivisionCreationProcessor{
		contracts,
		SK_SHO,
		SK_SPE,
		SK_PAS,
		SK_DEF,
		SK_END,
		LEAGUES_PER_DIV,
		TEAMS_PER_LEAGUE,
		calendarProcessor,
		PLAYERS_PER_TEAM_INIT,
		namesdb,
	}, nil
}

func (b *DivisionCreationProcessor) Process(tx *sql.Tx, event assets.AssetsDivisionCreation) error {
	log.Infof("Division Creation: timezoneIdx: %v, countryIdx %v, divisionIdx %v", event.Timezone, event.CountryIdxInTZ.Uint64(), event.DivisionIdxInCountry.Uint64())
	if event.CountryIdxInTZ.Uint64() == 0 && event.DivisionIdxInCountry.Uint64() == 0 {
		timezone := storage.Timezone{event.Timezone}
		if err := timezone.Insert(tx); err != nil {
			return err
		}
	}
	if event.DivisionIdxInCountry.Uint64() == 0 {
		countryIdx := event.CountryIdxInTZ.Uint64()
		if countryIdx > 65535 {
			return errors.New("Cannot cast country idx to uint16: value too large")
		}
		country := storage.Country{event.Timezone, uint32(countryIdx)}
		if err := country.Insert(tx); err != nil {
			return err
		}
	}
	if err := b.storeTeamsForNewDivision(tx, event.Raw.BlockNumber, event.Timezone, event.CountryIdxInTZ, event.DivisionIdxInCountry); err != nil {
		return err
	}
	return nil
}
func (b *DivisionCreationProcessor) storeTeamsForNewDivision(tx *sql.Tx, blockNumber uint64, timezone uint8, countryIdx *big.Int, divisionIdxInCountry *big.Int) error {
	opts := &bind.CallOpts{}

	leagueIdxBegin := divisionIdxInCountry.Int64() * int64(b.LEAGUES_PER_DIV)
	leagueIdxEnd := leagueIdxBegin + int64(b.LEAGUES_PER_DIV)

	for leagueIdx := leagueIdxBegin; leagueIdx < leagueIdxEnd; leagueIdx++ {
		league := storage.League{timezone, uint32(countryIdx.Uint64()), uint32(leagueIdx)}
		if err := league.Insert(tx); err != nil {
			return err
		}
		teamIdxBegin := leagueIdx * int64(b.TEAMS_PER_LEAGUE)
		teamIdxEnd := teamIdxBegin + int64(b.TEAMS_PER_LEAGUE)
		for teamIdxInLeague, teamIdx := uint32(0), teamIdxBegin; teamIdx < teamIdxEnd; teamIdx, teamIdxInLeague = teamIdx+1, teamIdxInLeague+1 {
			if teamId, err := b.contracts.Assets.EncodeTZCountryAndVal(opts, timezone, countryIdx, big.NewInt(teamIdx)); err != nil {
				return err
			} else {
				teamName, errname := b.namesGenerator.GenerateTeamName(teamId, timezone, countryIdx.Uint64())
				if errname != nil {
					return errname
				}
				team := storage.NewTeam()
				team.TeamID = teamId.String()
				team.TimezoneIdx = timezone
				team.CountryIdx = uint32(countryIdx.Uint64())
				team.Name = teamName
				team.Owner = storage.BotOwner
				team.LeagueIdx = uint32(leagueIdx)
				team.TeamIdxInLeague = teamIdxInLeague
				team.RankingPoints = 10
				if err := team.Insert(tx); err != nil {
					return err
				} else if err := b.storeVirtualPlayersForTeam(tx, opts, blockNumber, teamId, timezone, countryIdx, teamIdx); err != nil {
					return err
				} else if err := b.createInitialTactics(tx, timezone, teamId); err != nil {
					return err
				} else if err := b.createInitialTraining(tx, teamId); err != nil {
					return err
				}

			}
		}

		err := b.calendarProcessor.Generate(tx, timezone, uint32(countryIdx.Uint64()), uint32(leagueIdx))
		if err != nil {
			return err
		}
		err = b.calendarProcessor.Populate(tx, timezone, uint32(countryIdx.Uint64()), uint32(leagueIdx))
		if err != nil {
			return err
		}
	}
	return nil
}

func (b *DivisionCreationProcessor) storeVirtualPlayersForTeam(tx *sql.Tx, opts *bind.CallOpts, blockNumber uint64, teamId *big.Int, timezone uint8, countryIdx *big.Int, teamIdxInCountry int64) error {
	begin := teamIdxInCountry * int64(b.PLAYERS_PER_TEAM_INIT)
	end := begin + int64(b.PLAYERS_PER_TEAM_INIT)

	generation := uint8(0)
	for i := begin; i < end; i++ {
		playerId, err := b.contracts.Assets.EncodeTZCountryAndVal(opts, timezone, countryIdx, big.NewInt(i))
		if err != nil {
			log.Warning(err)
		}
		encodedSkills, err := b.contracts.Assets.GetPlayerSkillsAtBirth(opts, playerId)
		if err != nil {
			log.Warning(err)
		}
		encodedState, err := b.contracts.Market.GetPlayerStateAtBirth(opts, playerId)
		if err != nil {
			log.Warning(err)
		}
		defence, speed, pass, shoot, endurance, potential, dayOfBirth, err := b.contracts.DecodeSkills(encodedSkills)
		if err != nil {
			log.Warning(err)
		}
		preferredPosition, err := GetPlayerPreferredPosition(b.contracts, encodedSkills)
		if err != nil {
			log.Warning(err)
		}
		shirtNumber, err := b.contracts.Assets.GetCurrentShirtNum(opts, encodedState)
		if err != nil {
			log.Warning(err)
		}
		name, err := b.namesGenerator.GeneratePlayerFullName(playerId, generation, timezone, countryIdx.Uint64())
		if err != nil {
			return fmt.Errorf("%s playerId: %v, generation: %v, timezone: %v, countryIdx %v", err.Error(), playerId, generation, timezone, countryIdx.Uint64())
		}
		player := storage.Player{
			PlayerId:          playerId,
			PreferredPosition: preferredPosition,
			Potential:         potential.Uint64(),
			DayOfBirth:        dayOfBirth.Uint64(),
			TeamId:            teamId.String(),
			Name:              name,
			Defence:           defence.Uint64(), // TODO: type should be uint16
			Speed:             speed.Uint64(),
			Pass:              pass.Uint64(),
			Shoot:             shoot.Uint64(),
			Endurance:         endurance.Uint64(),
			ShirtNumber:       uint8(shirtNumber.Uint64()),
			EncodedSkills:     encodedSkills,
			EncodedState:      encodedState,
			BlockNumber:       blockNumber,
		}
		if err := player.Insert(tx); err != nil {
			return err
		}
	}
	return nil
}

func (b *DivisionCreationProcessor) createInitialTactics(tx *sql.Tx, timezone uint8, teamID *big.Int) error {
	tacticId := 1
	tactic := &relay.Tactic{
		relay.UpcomingVerse,
		int(timezone),
		teamID.String(),
		tacticId,
		0,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
		10,
		11,
		12,
		25,
		relay.NoSubstitution,
		0,
		25,
		relay.NoSubstitution,
		0,
		25,
		relay.NoSubstitution,
		0,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
	}
	return tactic.Insert(tx)
}

func (b *DivisionCreationProcessor) createInitialTraining(tx *sql.Tx, teamID *big.Int) error {
	training := relay.Training{}
	training.Verse = relay.UpcomingVerse
	training.TeamID = teamID.String()
	training.SpecialPlayerShirt = -1
	return training.Insert(tx)
}
