package relay

import (
	"crypto/ecdsa"
	"database/sql"
	"encoding/hex"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/relay/storage"
	"github.com/freeverseio/crypto-soccer/go/useractions"
)

type Processor struct {
	updatesContract *updates.Updates
	auth            *bind.TransactOpts
	ipfsURL         string
}

// *****************************************************************************
// public
// *****************************************************************************

func NewProcessor(
	client *ethclient.Client,
	privateKey *ecdsa.PrivateKey,
	db *sql.DB,
	updatesContract *updates.Updates,
	ipfsURL string,
) (*Processor, error) {
	auth := bind.NewKeyedTransactor(privateKey)

	return &Processor{
		updatesContract,
		auth,
		ipfsURL,
	}, nil
}

func (p *Processor) Process(tx *sql.Tx) error {
	currentVerse, err := p.updatesContract.CurrentVerse(&bind.CallOpts{})
	if err != nil {
		return err
	}
	currentTrainings, err := storage.CurrentTrainings(tx)
	if err != nil {
		return err
	}
	currentTactics, err := storage.CurrentTactics(tx)
	if err != nil {
		return err
	}
	for _, training := range currentTrainings {
		training.Delete(tx)
		training.Verse = currentVerse.Uint64()
		if err = training.Insert(tx); err != nil {
			return err
		}
	}
	for _, tactic := range currentTactics {
		tactic.Delete(tx)
		tactic.Verse = currentVerse.Uint64()
		if err = tactic.Insert(tx); err != nil {
			return err
		}
	}

	actions := useractions.UserActions{}
	actions.Trainings = currentTrainings
	actions.Tactics = currentTactics
	hash, err := actions.Hash()
	if err != nil {
		return err
	}
	cid, err := actions.PushToIpfs(p.ipfsURL)
	if err != nil {
		return err
	}
	var root [32]byte
	copy(root[:], hash)

	log.Infof("[relay] submitActionsRoot root: 0x%v, cid: %v", hex.EncodeToString(root[:]), cid)
	_, err = p.updatesContract.SubmitActionsRoot(p.auth, root, cid)
	return err
}
