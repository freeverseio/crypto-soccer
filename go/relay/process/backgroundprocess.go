package relay

import (
	"crypto/ecdsa"
	"database/sql"
	"time"

	"github.com/ethereum/go-ethereum/ethclient"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
)

type BackgroundProcess struct {
	relay     *Processor
	queryStop chan (bool)
	stopped   chan (bool)
	delay     time.Duration
}

func BackgroundProcessNew(
	client *ethclient.Client,
	privateKey *ecdsa.PrivateKey,
	db *sql.DB,
	updatesContract *updates.Updates,
	delay time.Duration,
	ipfsURL string,
) (*BackgroundProcess, error) {
	processor, err := NewProcessor(client, privateKey, db, updatesContract, ipfsURL)
	if err != nil {
		return nil, err
	}
	return &BackgroundProcess{
		relay:     processor,
		queryStop: make(chan (bool)),
		stopped:   make(chan (bool)),
		delay:     delay,
	}, nil
}

func (b *BackgroundProcess) Process() error {
	tx, err := b.relay.db.Begin()
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		tx.Commit()
	}()
	err = b.relay.Process(tx)
	if err != nil {
		return err
	}
	return nil
}

func (b *BackgroundProcess) Start() {
	go func() {
	L:
		for {
			select {
			case <-b.queryStop:
				break L
			default:
				err := b.Process()
				if err != nil {
					panic(err)
				}
				time.Sleep(b.delay)
			}
		}
		b.stopped <- true
	}()
}

func (b *BackgroundProcess) StopAndJoin() {
	b.queryStop <- true
	<-b.stopped
}
