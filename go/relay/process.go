package relay

import (
	"database/sql"
	"encoding/hex"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/helper"
	"github.com/freeverseio/crypto-soccer/go/storage"
	"github.com/freeverseio/crypto-soccer/go/useractions"
)

type Processor struct {
	client          *ethclient.Client
	updatesContract *updates.Updates
	auth            *bind.TransactOpts
	ipfsURL         string
}

// *****************************************************************************
// public
// *****************************************************************************

func NewProcessor(
	client *ethclient.Client,
	auth *bind.TransactOpts,
	updatesContract *updates.Updates,
	ipfsURL string,
) (*Processor, error) {

	return &Processor{
		client,
		updatesContract,
		auth,
		ipfsURL,
	}, nil
}

func (p *Processor) Process(tx *sql.Tx) error {
	nextUpdate, err := p.NextUpdateSinceEpochSec()
	now := NowSinceEpochSec()
	if now < nextUpdate {
		log.Infof("Now %v Next Update %v ... ", now, nextUpdate)
		return nil
	}
	currentVerse, err := p.updatesContract.GetCurrentVerse(&bind.CallOpts{})
	if err != nil {
		return err
	}
	nextToUpdate, err := p.updatesContract.NextTimeZoneToUpdate(&bind.CallOpts{})
	if err != nil {
		return err
	}
	log.Infof("Staring process of verse %v, timezone %v, day %v, turn %v", currentVerse, nextToUpdate.TimeZone, nextToUpdate.Day, nextToUpdate.TurnInDay)
	upcomingUserActions := useractions.New()
	if nextToUpdate.TimeZone == 0 {
		log.Info("Timezone 0 ... skipping user actions")
	} else if nextToUpdate.TurnInDay <= 1 {
		if upcomingUserActions, err = useractions.NewFromStorage(tx, int(nextToUpdate.TimeZone)); err != nil {
			return err
		}
	}
	root, err := upcomingUserActions.Root()
	if err != nil {
		return err
	}
	cid, err := upcomingUserActions.ToIpfs(p.ipfsURL)
	if err != nil {
		return err
	}
	log.Infof("[relay] submitActionsRoot root: 0x%v, cid: %v", hex.EncodeToString(root[:]), cid)
	transaction, err := p.updatesContract.SubmitActionsRoot(p.auth, root, cid)
	if err != nil {
		return err
	}
	_, err = helper.WaitReceipt(p.client, transaction, 10)
	if err != nil {
		return err
	}
	// if it's the 2nd half we reset the current training
	if nextToUpdate.TurnInDay == 1 {
		log.Infof("Reset trainings for timezone %v", nextToUpdate.TimeZone)
		if err = storage.ResetTrainingsByTimezone(tx, nextToUpdate.TimeZone); err != nil {
			return err
		}
	}
	return nil
}

func (p *Processor) NextUpdateSinceEpochSec() (int64, error) {
	secs, err := p.updatesContract.GetNextVerseTimestamp(nil)
	if err != nil {
		return 0, err
	}
	return secs.Int64(), nil
}

func NowSinceEpochSec() int64 {
	now := time.Now()
	secs := now.Unix()
	return secs
}
