package main

import (
	"flag"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	relay "github.com/freeverseio/crypto-soccer/go/relay/process"
	"github.com/freeverseio/crypto-soccer/go/relay/storage"
	"github.com/freeverseio/crypto-soccer/go/infrastructure"
)

func main() {
	postgresURL := flag.String("postgres", "postgres://freeverse:freeverse@relay.db:5432/relay?sslmode=disable", "postgres url")
	ethereumClient := flag.String("ethereum", "http://localhost:8545", "ethereum node")
	privateKeyHex := flag.String("private_key", "3B878F7892FBBFA30C8AED1DF317C19B853685E707C2CF0EE1927DC516060A54", "private key")
	updatesContractAddress := flag.String("updatesContractAddress", "", "")
	delay := flag.String("delay", "3600s", "3600s, 1h, ...")
	ipfsURL := flag.String("ipfs", "localhost:5001", "ipfs node url")

        infrastructure.MustRegisterFlags()
        flag.Parse()

        infrastructure.MustRegisterLoki()
        go infrastructure.MustStartMetrics()

	if *updatesContractAddress == "" {
		log.Fatal("no updates contract address")
	}

	log.Info("Starting ...")
	log.Info("Dial the Ethereum client: ", *ethereumClient)
	client, err := ethclient.Dial(*ethereumClient)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}

	log.Info("Creating Updates bindings to: ", *updatesContractAddress)
	updatesContract, err := updates.NewUpdates(common.HexToAddress(*updatesContractAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}

	log.Infof("ipfs URL: %v", *ipfsURL)

	log.Info("Connecting to DBMS: ", *postgresURL)
	db, err := storage.New(*postgresURL)
	if err != nil {
		log.Fatalf("Failed to connect to DBMS: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(*privateKeyHex)
	if err != nil {
		log.Fatal("Unable to obtain privateLey")
	}
	delayDuration, err := time.ParseDuration(*delay)
	if err != nil {
		log.Fatal(err)
	}
	log.Infof("Delay of %v seconds", delayDuration.Seconds())

	processor, err := relay.NewProcessor(client, privateKey, db, updatesContract, *ipfsURL)
	if err != nil {
		log.Fatal(err)
	}

	log.Info("All is ready ... 5 seconds to start ...")
	time.Sleep(5 * time.Second)

	for {
		tx, err := db.Begin()
		if err != nil {
			log.Error(err)
		}
		err = processor.Process(tx)
		if err != nil {
			tx.Rollback()
			log.Error(err)
		}
		tx.Commit()
		time.Sleep(delayDuration)
	}
}
