package main

import (
	"flag"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/relay/consumer"
	"github.com/freeverseio/crypto-soccer/go/relay/producer/gql"
	"github.com/freeverseio/crypto-soccer/go/relay/producer/submitactions"
	"github.com/freeverseio/crypto-soccer/go/storage"
)

func main() {
	postgresURL := flag.String("postgres", "postgres://freeverse:freeverse@localhost:5432/cryptosoccer?sslmode=disable", "postgres url")
	debug := flag.Bool("debug", false, "print debug logs")
	ethereumClient := flag.String("ethereum", "http://localhost:8545", "ethereum node")
	updatesContractAddress := flag.String("updatesContractAddress", "", "")
	assetsContractAddress := flag.String("assetsContractAddress", "", "")
	privateKeyHex := flag.String("private_key", "3B878F7892FBBFA30C8AED1DF317C19B853685E707C2CF0EE1927DC516060A54", "private key")
	ipfsURL := flag.String("ipfs", "localhost:5001", "ipfs node url")
	bufferSize := flag.Int("buffer_size", 10000, "size of event buffer")
	// sender := flag.String("sender", "sender address", "")
	flag.Parse()

	if *updatesContractAddress == "" {
		log.Fatal("no updates contract address")
	}

	privateKey, err := crypto.HexToECDSA(*privateKeyHex)
	if err != nil {
		log.Fatal("Unable to obtain privateLey")
	}

	if *debug {
		log.SetLevel(log.DebugLevel)
	}

	log.Info("Starting ...")

	log.Info("Dial the Ethereum client: ", *ethereumClient)
	client, err := ethclient.Dial(*ethereumClient)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	auth := bind.NewKeyedTransactor(privateKey)

	log.Info("Creating Updates bindings to: ", *updatesContractAddress)
	updatesContract, err := updates.NewUpdates(common.HexToAddress(*updatesContractAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	log.Info("Creating Assets bindings to: ", *assetsContractAddress)
	assetsContract, err := assets.NewAssets(common.HexToAddress(*assetsContractAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}

	log.Infof("ipfs URL: %v", *ipfsURL)

	log.Info("Connecting to DBMS: ", *postgresURL)
	db, err := storage.New(*postgresURL)
	if err != nil {
		log.Fatal("Failed to connect to DBMS: %v", err)
	}

	processor := consumer.NewProcessor(client, auth, updatesContract, *ipfsURL)
	transferFirstBotConsumer := consumer.NewTransferFirstBot(client, auth, assetsContract)

	c := make(chan interface{}, *bufferSize)
	go gql.NewServer(c)
	go submitactions.NewSubmitTimer(c, 5*time.Second)

	for {
		event := <-c
		switch ev := event.(type) {
		case gql.TransferFirstBotToAddrInput:
			log.Info("Received TransferFirstBotAddrInput")
			if err := transferFirstBotConsumer.Process(ev); err != nil {
				log.Fatal(err)
			}
		case submitactions.SubmitActionsEvent:
			log.Info("Relay sumbit action event")
			tx, err := db.Begin()
			if err != nil {
				log.Fatal(err)
			}
			if err = processor.Process(tx); err != nil {
				tx.Rollback()
				log.Fatal(err)
			}
			if err = tx.Commit(); err != nil {
				log.Fatal(err)
			}
		default:
			log.Error("unknown event: %v", event)
		}
	}
}
