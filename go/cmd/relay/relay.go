package main

import (
	"flag"
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/sirupsen/logrus"

	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/assets"
	"github.com/freeverseio/crypto-soccer/go/contracts/autogenerated/updates"
	"github.com/freeverseio/crypto-soccer/go/relay/consumer"
	"github.com/freeverseio/crypto-soccer/go/relay/producer/gql"
	"github.com/freeverseio/crypto-soccer/go/relay/producer/submitactions"
	"github.com/freeverseio/crypto-soccer/go/storage"
)

func main() {
	postgresURL := flag.String("postgres", "postgres://freeverse:freeverse@localhost:5432/cryptosoccer?sslmode=disable", "postgres url")
	debug := flag.Bool("debug", false, "print debug logs")
	ethereumClient := flag.String("ethereum", "http://localhost:8545", "ethereum node")
	updatesContractAddress := flag.String("updatesContractAddress", "", "")
	assetsContractAddress := flag.String("assetsContractAddress", "", "")
	privateKeyHex := flag.String("private_key", "3B878F7892FBBFA30C8AED1DF317C19B853685E707C2CF0EE1927DC516060A54", "private key")
	ipfsURL := flag.String("ipfs", "localhost:5001", "ipfs node url")
	bufferSize := flag.Int("buffer_size", 10000, "size of event buffer")
	flag.Parse()

	privateKey, err := crypto.HexToECDSA(*privateKeyHex)
	if err != nil {
		log.Fatal("Unable to obtain privateLey")
	}

	if *debug {
		log.SetLevel(log.DebugLevel)
	}

	log.Info("Starting ...")

	log.Info("Dial the Ethereum client: ", *ethereumClient)
	client, err := ethclient.Dial(*ethereumClient)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	auth := bind.NewKeyedTransactor(privateKey)
	auth.GasPrice = big.NewInt(1000000000) // in xdai is fixe to 1 GWei
	log.Infof("Address : %v", crypto.PubkeyToAddress(privateKey.PublicKey).Hex())

	log.Info("Creating Updates bindings to: ", *updatesContractAddress)
	updatesContract, err := updates.NewUpdates(common.HexToAddress(*updatesContractAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	log.Info("Creating Assets bindings to: ", *assetsContractAddress)
	assetsContract, err := assets.NewAssets(common.HexToAddress(*assetsContractAddress), client)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}

	log.Infof("ipfs URL: %v", *ipfsURL)

	log.Info("Connecting to DBMS: ", *postgresURL)
	db, err := storage.New(*postgresURL)
	if err != nil {
		log.Fatal("Failed to connect to DBMS: %v", err)
	}

	ch := make(chan interface{}, *bufferSize)

	go gql.NewServer(ch)
	go submitactions.NewSubmitTimer(ch, 5*time.Second)

	consumer.NewConsumer(
		ch,
		client,
		auth,
		updatesContract,
		assetsContract,
		*ipfsURL,
		db,
	).Start()
}
