apiVersion: v1
data:
  bootstrap-peer-id: QmZyN2aLhjCKrvpJ1R1gqrEevDN9fz3eHnnK1dDAuGtrGy
kind: ConfigMap
metadata:
  name: env-config
---
apiVersion: v1
data:
  cluster-entrypoint.sh: |
    #!/bin/sh
    user=ipfs

    # This is a custom entrypoint for k8s designed to connect to the bootstrap
    # node running in the cluster. It has been set up using a configmap to
    # allow changes on the fly.


    if [ ! -f /data/ipfs-cluster/service.json ]; then
      ipfs-cluster-service init
    fi

    PEER_HOSTNAME=`cat /proc/sys/kernel/hostname`

    grep -q ".*ipfs-cluster-0.*" /proc/sys/kernel/hostname
    if [ $? -eq 0 ]; then
      CLUSTER_ID=${BOOTSTRAP_PEER_ID} \
      CLUSTER_PRIVATEKEY=${BOOTSTRAP_PEER_PRIV_KEY} \
      exec ipfs-cluster-service daemon --upgrade --leave
    else
      BOOTSTRAP_ADDR=/dns4/${SVC_NAME}-0.${SVC_NAME}/tcp/9096/ipfs/${BOOTSTRAP_PEER_ID}

      if [ -z $BOOTSTRAP_ADDR ]; then
        exit 1
      fi
      # Only ipfs user can get here
      exec ipfs-cluster-service daemon --upgrade --bootstrap $BOOTSTRAP_ADDR --leave
    fi
  configure-ipfs.sh: |
    #!/bin/sh
    set -x
    # This is a custom entrypoint for k8s designed to run ipfs nodes in an appropriate
    # setup for production scenarios.

    if [ -f /data/ipfs/repo.lock ]; then
      rm /data/ipfs/repo.lock
    fi

    ipfs init --profile="server,badgerds"
    ipfs config Datastore.StorageMax 180GB
    ipfs config --json Swarm.ConnMgr.HighWater 2000
    ipfs config --json Datastore.BloomFilterSize 1048576

    chown -R ipfs /data/ipfs

    exit 0
kind: ConfigMap
metadata:
  name: ipfs-cluster-set-bootstrap-conf
---
apiVersion: v1
data:
  bootstrap-peer-priv-key: Q0FBU3JCSXdnZ2tvQWdFQUFvSUNBUURNc0ZJMXF0dWgxQk42bU9OYnRQSFplMksveldGS3FsU0QvV0x6UFNoczNiQzNuQTJPNyt2UHEvd2djOUNJT2Y2cU1yWDg1UnZWeVNydDU0cHRFT2hPbW9WVFlHdFl2NjdEODdoc05IcklDaTFTbWpxVFh3U2FqcmpSZGo1c0NhdHVSQVhzaHI3ejZheDh4ZlVuY3czWXJXRnRJKzd0TzdWMDhCQUR4VzJCU2JqQkl3cGpDNEhNU0xQYzkzZUJxQWV2ai9ZcFl6OFVZY1I5UU5kWDlSaG5KdnR0dDJ1a3kzQzNNeTRlOVRkTVBEeWRTeEppQWpsb1A5bmZKMm0xQTJ2OTVBNi9JNkFZUEUyNmpDWXFuSk9SV2pONVdSS2xmdzNLMm9JeWVLTTJDSEJqQVIxTXBCdDBJcmxlN0VPWFRGdUVXd2hlakxqcFVma3VndUgvYUpXVUFxWGc4SFlqbGxjWHBkOVpwbHV0aU5pZFZ4bHNHdnUrZGJrVmdLYm40Uy81TmoyL2pBWExKZCt5RzJNWktzb1daY3dLL1c1WmNoQS9jRENuMUR3cEc3Tm5CbkwxTkE3alBiU2J4OTk1Nzh3WCtsSFFaQ0h1ek15YTRGSEVtdGtGUHNzTmdsQUlDQjJ5WmwwcHU1ZTdCcmNPQXpHTWFQaUZGQUh0N3RCUkZEY0hONFNXZnJKKzBWcmNTU1pLTHhlYk1nYmh4aUVFU0V5aWNmS1NRTG1FN2E1T0pIZENtWGZXSmZ5THBVNWtUMXV4S3FyWXhtZnFNMEVMVFlDZ1dDY1dUdDJlVUpsVlVXQ2hoS09mSWVUbjhWRzQ4WGFYdm16UFRaMlIyaVNPMy9lbUZqa1h1TkVyUSttOFFyZGpKOHFacUU0eUVEc2pscFFMVW1lZVVVZ0NXd0lEQVFBQkFvSUNBRU9uSDNUbmhQSkc0eTFKTFJSWmlQb2w0dXljR0VVU2FSNjYrQ0tIR3o1b1E0bGNSY3J4bDVJck9Ra00zbWE0TEdqYW0vWDdUNmpvZFl6dVUzMWE4ajFRcXpKMGt1WmhiSVVObiszN3BuMUpoOU5lY0cvWEh2RnFyTUZtZ0prNjFQTjcvaTFBR0FzTU45dUJubGFzbTIzN1dGRTNhRGYyM1RIS1NyREVaejR0UEtoeFNYU1ZFQkNTRXdpOHJqNG5hR3JwZlNZT3pJR1RFdHVITytXeGQ2QlliUS9GYVFtdHlCSjFFeEJlWWltTFcwbHR6NlNmTVpRNFRtMklYRkxjejZ1NTNmbms3M3d6S2ttM0dzSkl3Q2x4azhQTzRlL2JQNWJGZy9Ua2xLVStRczhtUmlYWHM4ODl6dUVGM0EwOHlwN0RhOCs4V1QyY3YyeFZEQmRiM052WWREWVVRMkpIVUdDZCtCTUpqU1Vla2VsL0xoUytsYWxwcHRkMHFINmVqb0Y2T2lRc25YNTZRVG8zTEZCVkptcTQ5RWQ2TTZxLzhrU3JDeGtYb25xV2o4VzV1cXdnUkI4bHNybjF3MmM5eUhvT0htTk1HZFdZUHYraVUxZjBiTkVQM1Z3L2tPUzRlWlF3NFFCemdOc01BU29MMDU5cW1SVTVnZmNwMEw3UTJibjNHM0FFaXRmQlNlWXYxcTcwSDRoNUVtUWZmV2s5K3VTeTc5NGdlSHdvWklvc0RpdlY1K2ZqUGxqQTcyZm51MG55Z3dzTVMxVkZxSzJWZ28zcmhwdDhhTXBxWGdsUkVFYjByTlpPWHhGem9SV0MzcXdRbEgzTTFraGlkWHBONjJJZ3lnNXhjbk4zMmtrc2hiMExqQmxVR21FMW1MeWR0S3V6UzFDR0hPemhBb0lCQVFEblZYSGNIaHNSZ2lHMmRrdW8xczF5VlNFYlFQQzJPeWNjNUllc29pbllYaFRxYnkvUmZtNmJ1dnRYWksvZjFUSVJUdEMybzhKdjJZSTJNbkI4QUt2b1pQcWt4SytKUDBHeEhGM04wMWZ3djdjRy9EVE9Lb2hOa2dtMVo2Z3V1MlpBb3dYSUxDWlh5Vi9uSTZadDVOZmVqV1lHS1ZudXBzVThLZFcvaWltQVh3aGhYUHlqYU9nQWQwRE1RSGFrNlpqaVV2cmRSdWdDaVExNDB3VWFlUXNSR0toQnFyZkJiYktkZGNnNUFQcHBDS0pTS3NlaVhZelFuWlpObzhzeDBtWE9VTDNjNHViYnZEN1VXRkFmRFc0RUQ0RzVYUFNwM0xWSFNHR3BlLzJTTnBvMnFINXNOeXFySWdVU0U5N1U0TnpKZ1UzbTB1VUpSTUIrRWtrc1BrU0xBb0lCQVFEaWc1RHZEUlgrMlpJWnRsdjJFajF5Q1JlbFNJS2VYTkhWT29LL2xjQngzM0o1dk94c2ZzcS85OTU3bG1vZ1hhUDhZZVh5TG1LNmNLUjJrTU9BekdlU2R1WHp5YkZWa3NMU0FZK0JzaEJyaFlzcndDVjZYbVBpVitQZWwwNjJjZDZGVjhtTkRRNkdFeVcyRzMxMWp4SWpFUU9hOTFwYzBJUTJRbm41SzQ0NXl0ZjZ0MThNVCtpVEd5OGRsVkpDZnJMVEwxVHo2MnAxZkVMZlNBZGxUdG9Ic0t1UVIwRS8xUitocGxTZkc2NzBGQy8vdHMyeldNa1dVTHlVN1d1eFNVWE9CR01qaXVWZE1jc1g5K0hhYXdnemdGZ0JEekMxdjU2SGxDRjlybHlIajl0NWY1RE92M1RCeXd4UEZZdnhnK2xJSVV1TTBDTlhNNHl1c1BtbkhtTnhBb0lCQURCczg0dkhoWlVScjZyNWNuY2ltQmxCOXM4MHRlNy96UDFBWGFKbXcrbTJNQnl2TDh4ajhoV0plOG5jbXZCNU9hVGo0YzhKMHM4Rk1qdlVMVFhZRWlSdzF3TWM1VDRPenRxYmZJdDBuV2taU09BZWRaTmUxZStmRFljNjdycnhvY01RSFVxODZ6M2ZPc013OUVyMjU3Vi8xZ2FlSzJSSTV1cmtPd21BaTVXQ3owZEtadHh5UG5heWdBOEJ3NVJjRGhQNm1PY3ZTNndVTW96RFo4TVY2Wm9ubGpsQTJueVVVUnFqS0VtK2lhenBFTW13aU4vVlEzLzhMUldObnlDTDBhSHh4dnp4UnJCaTVLZ2c0SXpQaStNdnQ5RXN3MDYzay84YkNNNm8xUGtCa3lDei90cjZaV1V6bHVvazNMV2xhTEtKN2R2TzlBRVBzbGZ4emYyRC8yY0NnZ0VCQUpraVBROS9sMGt0cWRuOE1QdVFwVDI4NitGdnZlNTE3ZDNycW96L0hwVmRiTFRraGlsckpvTFZmZkdyWkovdzduWW5jUjlqUUpldW8yRU15VDcvOFYxUlNIQ2lBR05MenEzUEpFZVlMQVdreU11UklVVXpIdS9jWDA4U2w4SThCU1c4amFQd0djdUdrazRsRTVJd1lTQ1gxZ29rQTFFUUh2SFh5MElxc2dKY0lkdDdzS1JRT1htS1BUWVF4d1h4UmRBRUJiakpoTFZjaHBFUXp2OHNhYllkT0Q5WURNS3N3SysyRlN0anVjbUZCRllxTGJKNzZhWk9lczlzR3d4Rjd3MHlaaHVYUVN6YUJ1VnpUWnN1Rk9OTWR6SndKSXdhdVlBTEl3RW1xYU4wRy9wdHhXWWdoVHltbXZHMExXSGZ2Z3huaGYzeWtKSFpaZGlNQ0p0MHJlRUNnZ0VBTjR2MjFTbWdIaUpVbDMxRjQzdURLS09ZOHJUNUNDYUdHUDRvemZBNHVNMnh2TFJIcXZHUms0UlVMNmoybUMraXdzQU9xeGs1Qk8yREhRSC9kUUVmWUIzdWdaOEFSOGcwY1BRby9WQkM0aFNnUjRmQk9qeWx2OHVMZ0gxN2RTR1JQOHIxWG01ZTlLalJmM21TTkZIVGIrc096MVNPRk1ZeWFpOU05U1hDUWtZYUNVcFVKT0RGTmYxSDJ0SzQwOGc1azd5NHpCSjJPYTRIV2RIRjJheWZQOFBROUdjcVpvMzB3R01ONGttZ3F4dTBpNmlzbExITUtVRjgzNlAySDFwalNrbHJldENhRDNTc2tJWVphRk00YWt1Uk9DU0lCNEMrZUVQK0pseGVnVTV4WUJvNGg0RkJNSjlrNTNockM5RlpaNmxRMWcxNUpIdVI1QWllSHZhL2xBPT0K
  cluster-secret: MDk5Njg3OTczNzJiYmZlOWM0YjdiYjcwYjczOGU2MWRiODE0ZmE0NGNiMzNiNGZhZWE1MjA0OTY2MDdjNjNlZA==
kind: Secret
metadata:
  name: secret-config
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ipfs-cluster
  name: ipfs-cluster
spec:
  ports:
  - name: swarm
    port: 4001
    targetPort: swarm
  - name: api
    port: 5001
    targetPort: api
  - name: cluster-swarm
    port: 9096
    targetPort: cluster-swarm
  selector:
    app: ipfs-cluster
  type: LoadBalancer
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipfs-cluster
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ipfs-cluster
  serviceName: ipfs-cluster
  template:
    metadata:
      labels:
        app: ipfs-cluster
    spec:
      containers:
      - env:
        - name: IPFS_FD_MAX
          value: "4096"
        image: ipfs/go-ipfs:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          tcpSocket:
            port: swarm
          timeoutSeconds: 5
        name: ipfs
        ports:
        - containerPort: 4001
          name: swarm
          protocol: TCP
        - containerPort: 4002
          name: swarm-udp
          protocol: UDP
        - containerPort: 5001
          name: api
          protocol: TCP
        - containerPort: 8081
          name: ws
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data/ipfs
          name: ipfs-storage
        - mountPath: /custom
          name: configure-script
      - command:
        - sh
        - /custom/cluster-entrypoint.sh
        env:
        - name: BOOTSTRAP_PEER_PRIV_KEY
          valueFrom:
            secretKeyRef:
              key: bootstrap-peer-priv-key
              name: secret-config
        - name: BOOTSTRAP_PEER_ID
          valueFrom:
            configMapKeyRef:
              key: bootstrap-peer-id
              name: env-config
        - name: CLUSTER_SECRET
          valueFrom:
            secretKeyRef:
              key: cluster-secret
              name: secret-config
        - name: CLUSTER_CRDT_CLUSTERNAME
          value: gr-ipfs-cluster
        - name: CLUSTER_IPFSHTTP_NODEMULTIADDRESS
          value: /ip4/127.0.0.1/tcp/5001
        - name: CLUSTER_MONITOR_PING_INTERVAL
          value: 3m
        - name: SVC_NAME
          value: ipfs-cluster
        envFrom:
        - configMapRef:
            name: env-config
        image: ipfs/ipfs-cluster:latest
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: cluster-swarm
          timeoutSeconds: 5
        name: ipfs-cluster
        ports:
        - containerPort: 9094
          name: api-http
          protocol: TCP
        - containerPort: 9095
          name: proxy-http
          protocol: TCP
        - containerPort: 9096
          name: cluster-swarm
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data/ipfs-cluster
          name: cluster-storage
        - mountPath: /custom
          name: configure-script
      initContainers:
      - command:
        - sh
        - /custom/configure-ipfs.sh
        image: ipfs/go-ipfs:latest
        name: configure-ipfs
        volumeMounts:
        - mountPath: /data/ipfs
          name: ipfs-storage
        - mountPath: /custom
          name: configure-script
      volumes:
      - configMap:
          name: ipfs-cluster-set-bootstrap-conf
        name: configure-script
  volumeClaimTemplates:
  - metadata:
      name: cluster-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: do-block-storage
  - metadata:
      name: ipfs-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: do-block-storage
