apiVersion: v1
kind: ConfigMap
metadata:
  name: ipfs-cluster-set-bootstrap-conf
data:
  cluster-entrypoint.sh: |
    #!/bin/sh
    user=ipfs

    IDENTITY_PATH=/data/ipfs-cluster/identity.json
    cat << EOF > "${IDENTITY_PATH}"
    {
        "id": "${PEER_ID}",
        "private_key": "${PEER_PRIV_KEY}"
    }
    EOF

    if [ ! -f /data/ipfs-cluster/service.json ]; then
      #ipfs-cluster-service init
      ipfs-cluster-service init --peers "/dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/p2p/${PEER_ID_1}, /dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/p2p/${PEER_ID_2}"
    fi

    BOOTSTRAP_ADDR=/dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/ipfs/${BOOTSTRAP_PEER_ID}

    if [ -z $BOOTSTRAP_ADDR ]; then
      exit 1
    fi
    # Only ipfs user can get here
    exec ipfs-cluster-service daemon --upgrade --bootstrap $BOOTSTRAP_ADDR --leave
  configure-ipfs.sh: |
    #!/bin/sh
    set -x
    # This is a custom entrypoint for k8s designed to run ipfs nodes in an appropriate
    # setup for production scenarios.

    if [ -f /data/ipfs/repo.lock ]; then
      rm /data/ipfs/repo.lock
    fi

    ipfs init --profile="server"
    ipfs config Datastore.StorageMax 180GB
    ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001 
    ipfs config --json Swarm.ConnMgr.HighWater 200
    ipfs config --json Datastore.BloomFilterSize 1048576
    ipfs config --json Addresses.Announce $IPFS_ADDRESS_ANNOUNCE

    chown -R ipfs /data/ipfs

    exit 0
