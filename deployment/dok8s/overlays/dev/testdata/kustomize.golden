apiVersion: v1
data:
  bootstrap-peer-id: QmZyN2aLhjCKrvpJ1R1gqrEevDN9fz3eHnnK1dDAuGtrGy
  peer-id: 12D3KooWF1hZAzDXFJpmmMi6Fh3uAECuUpqv1jPr9TvaV2rV3T3k
  trusted-peer-id-1: 12D3KooWQykVgEXTSn3f5YHvSccvCtm37DS4MNonmCfZXpKAqiiZ
  trusted-peer-id-2: 12D3KooWN95D1J4rcqkeAmADZbtBLZiExX6qKDGum5TMMoSQhmEs
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: env-config
---
apiVersion: v1
data:
  ASSETS_CONTRACT_ADDRESS: 0x5F0351300ecB75897358830b606b1EC0290703BD
  BLOCKS_PER_STEP: "10000"
  CONSTANTSGETTERS_CONTRACT_ADDRESS: 0xdC8C4501c7676F6F1a504224Dc235E2213D53406
  ENGINE_CONTRACT_ADDRESS: 0x2374E6620A0a1fcA5D6c3C471d9f717E0E360428
  ENGINEAPPLYBOOSTERS_CONTRACT_ADDRESS: 0x9901eB039Ed10a0DCb971d4b59b11EaADFf2EF4c
  ENGINEPRECOMP_CONTRACT_ADDRESS: 0x1eb7056F5023637fE962f603fa4B40428e7C5809
  EVOLUTION_CONTRACT_ADDRESS: 0x48d4818D754fF4eC4Fbc971A3f63098eA5888Cfa
  FRIENDLIES_CONTRACT_ADDRESS: 0x7A3f9b2D5b984129f576F93f640103b769b1Ad9e
  LEAGUES_CONTRACT_ADDRESS: 0x0692b3de6c378eE595C44F0760344fa8c6E35EbB
  MARKET_CONTRACT_ADDRESS: 0x5F0351300ecB75897358830b606b1EC0290703BD
  MARKETCRYPTO_CONTRACT_ADDRESS: 0x8Ee981E3c00571b383F86c144F83078F12149801
  PLAYANDEVOLVE_CONTRACT_ADDRESS: 0xC6c7439640e2C82ce70Fefc8D7b4F56FDcdE8681
  PRIVILEGED_CONTRACT_ADDRESS: 0x5F0351300ecB75897358830b606b1EC0290703BD
  PROXY_CONTRACT_ADDRESS: 0x5F0351300ecB75897358830b606b1EC0290703BD
  SHOP_CONTRACT_ADDRESS: 0x05E43062013fC33FAF573DB743Bd58634827b4d7
  SHOP_CONTRACT_CONTRACT_ADDRESS: 0x9A54642ACd6c9d2abEfeC300C039DA3b5710D6D6
  TRAININGPOINTS_CONTRACT_ADDRESS: 0xEB68FB082f207EFDa5560961a189944E8233E6Fa
  UPDATES_CONTRACT_ADDRESS: 0x5F0351300ecB75897358830b606b1EC0290703BD
  UTILS_CONTRACT_ADDRESS: 0x0197e234ACe049f07644F51212CBD1A26De593D6
  freeverse_password: freeverse
  freeverse_username: freeverse
  market_id: ""
  notary_private_key: 363bd383b24285cba965d524f54413c3369d8fb244b57359767a0da31ce6e7d3
  relay_private_key: 0eec2a97925bcb1c636e63bc1db8b80f02dc8840e6a77b760b1c640b5f607f00
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: freeverse-configmap
---
apiVersion: v1
data:
  cluster-entrypoint.sh: |
    #!/bin/sh
    user=ipfs

    IDENTITY_PATH=/data/ipfs-cluster/identity.json
    cat << EOF > "${IDENTITY_PATH}"
    {
        "id": "${PEER_ID}",
        "private_key": "${PEER_PRIV_KEY}"
    }
    EOF

    if [ ! -f /data/ipfs-cluster/service.json ]; then
      #ipfs-cluster-service init
      ipfs-cluster-service init --peers "/dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/p2p/${PEER_ID_1}, /dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/p2p/${PEER_ID_2}"
    fi

    BOOTSTRAP_ADDR=/dns4/${GOALREV_IPFS_CLUSTER_DNS}/tcp/9096/ipfs/${BOOTSTRAP_PEER_ID}

    if [ -z $BOOTSTRAP_ADDR ]; then
      exit 1
    fi
    # Only ipfs user can get here
    exec ipfs-cluster-service daemon --upgrade --bootstrap $BOOTSTRAP_ADDR --leave
  configure-ipfs.sh: |
    #!/bin/sh
    set -x
    # This is a custom entrypoint for k8s designed to run ipfs nodes in an appropriate
    # setup for production scenarios.

    if [ -f /data/ipfs/repo.lock ]; then
      rm /data/ipfs/repo.lock
    fi

    ipfs init --profile="server,badgerds"
    ipfs config Datastore.StorageMax 180GB
    ipfs config --json Swarm.ConnMgr.HighWater 2000
    ipfs config --json Datastore.BloomFilterSize 1048576

    chown -R ipfs /data/ipfs

    exit 0
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: ipfs-cluster-set-bootstrap-conf
---
apiVersion: v1
data:
  cluster-secret: MDk5Njg3OTczNzJiYmZlOWM0YjdiYjcwYjczOGU2MWRiODE0ZmE0NGNiMzNiNGZhZWE1MjA0OTY2MDdjNjNlZA==
  peer-priv-key: Q0FFU1FCblE3azJZdmVzRVc3eDljWDVCb2NBOVJocE85ajdVWW9odjM2aU1wT0FpVFRHK2dCbDMreW1zUnk0NzFhUXVVWndUK3phRVZtNVFMN3U2N1dCNWd6Yz0=
kind: Secret
metadata:
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: secret-config
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: authproxy
    app.kubernetes.io/component: authproxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: authproxy
spec:
  ports:
  - port: 8080
  selector:
    app.kubernetes.io/app: authproxy
    app.kubernetes.io/component: authproxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: dashboard
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: dashboard
spec:
  ports:
  - port: 80
  selector:
    app.kubernetes.io/app: dashboard
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: horizon
    app.kubernetes.io/component: horizon
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: horizon
spec:
  ports:
  - port: 4000
  selector:
    app.kubernetes.io/app: horizon
    app.kubernetes.io/component: horizon
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ipfs-cluster
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: ipfs-cluster
spec:
  ports:
  - name: swarm
    port: 4001
    targetPort: swarm
  - name: cluster-swarm
    port: 9096
    targetPort: cluster-swarm
  selector:
    app: ipfs-cluster
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: ipfsnode
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: ipfsnode
spec:
  ports:
  - name: api
    port: 5001
    targetPort: api
  selector:
    app.kubernetes.io/app: ipfs-cluster
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: marketdb
    app.kubernetes.io/component: marketdb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: marketdb
spec:
  ports:
  - port: 5432
  selector:
    app.kubernetes.io/app: marketdb
    app.kubernetes.io/component: marketdb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: notary
    app.kubernetes.io/component: notary
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: notary
spec:
  ports:
  - name: api
    port: 4000
    targetPort: 4000
  selector:
    app.kubernetes.io/app: notary
    app.kubernetes.io/component: notary
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: oauth2-proxy
    app.kubernetes.io/component: oauth2-proxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
    k8s-app: oauth2-proxy
  name: oauth2-proxy
spec:
  ports:
  - name: http
    port: 4180
    protocol: TCP
    targetPort: 4180
  selector:
    app.kubernetes.io/app: oauth2-proxy
    app.kubernetes.io/component: oauth2-proxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
    k8s-app: oauth2-proxy
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: relayactions
    app.kubernetes.io/component: relayactions
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: relayactions
spec:
  ports:
  - name: api
    port: 4000
    targetPort: 4000
  selector:
    app.kubernetes.io/app: relayactions
    app.kubernetes.io/component: relayactions
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: synchronizer
    app.kubernetes.io/component: synchronizer
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: synchronizer
spec:
  ports:
  - port: 4004
  selector:
    app.kubernetes.io/app: synchronizer
    app.kubernetes.io/component: synchronizer
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: trader
    app.kubernetes.io/component: trader
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: trader
spec:
  ports:
  - port: 4000
  selector:
    app.kubernetes.io/app: trader
    app.kubernetes.io/component: trader
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: universeapi
    app.kubernetes.io/component: universeapi
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: universeapi
spec:
  ports:
  - name: http
    port: 4000
    protocol: TCP
    targetPort: 4000
  selector:
    app.kubernetes.io/app: universeapi
    app.kubernetes.io/component: universeapi
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: universedb
    app.kubernetes.io/component: universedb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: universedb
spec:
  ports:
  - port: 5432
  selector:
    app.kubernetes.io/app: universedb
    app.kubernetes.io/component: universedb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: authproxy
    app.kubernetes.io/component: authproxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: authproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: authproxy
      app.kubernetes.io/component: authproxy
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: authproxy
        app.kubernetes.io/component: authproxy
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -backdoor=true
        - -timeout=30
        - -gqlurl
        - http://horizon:4000
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/authproxy:dev
        imagePullPolicy: Always
        name: authproxy
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: dashboard
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: dashboard
      app.kubernetes.io/component: dashboard
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: dashboard
        app.kubernetes.io/component: dashboard
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - image: freeverseio/dashboard:dev
        imagePullPolicy: Always
        name: dashboard
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: horizon
    app.kubernetes.io/component: horizon
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: horizon
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: horizon
      app.kubernetes.io/component: horizon
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: horizon
        app.kubernetes.io/component: horizon
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -u
        - http://universeapi:4000/graphql
        - -m
        - http://trader:4000/graphql
        - -r
        - http://relayactions:4000/graphql
        - -n
        - http://notary:4000/graphql
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/horizon:dev
        imagePullPolicy: Always
        name: horizon
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: marketdb
    app.kubernetes.io/component: marketdb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: marketdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: marketdb
      app.kubernetes.io/component: marketdb
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: marketdb
        app.kubernetes.io/component: marketdb
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - image: freeverseio/market.db:dev
        imagePullPolicy: Always
        name: marketdb
        ports:
        - containerPort: 5432
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: notary
    app.kubernetes.io/component: notary
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: notary
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: notary
      app.kubernetes.io/component: notary
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: notary
        app.kubernetes.io/component: notary
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -postgres
        - postgres://$(freeverse_username):$(freeverse_password)@marketdb:5432/market?sslmode=disable
        - -ethereum
        - http://xdai:8545
        - -private_key
        - $(notary_private_key)
        - -market_address
        - $(MARKET_CONTRACT_ADDRESS)
        - -constantsgetters_address
        - $(CONSTANTSGETTERS_CONTRACT_ADDRESS)
        - -market_id
        - $(market_id)
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/market.notary:dev
        imagePullPolicy: Always
        name: notary
        ports:
        - containerPort: 4000
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: oauth2-proxy
    app.kubernetes.io/component: oauth2-proxy
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
    k8s-app: oauth2-proxy
  name: oauth2-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: oauth2-proxy
      app.kubernetes.io/component: oauth2-proxy
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
      k8s-app: oauth2-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/app: oauth2-proxy
        app.kubernetes.io/component: oauth2-proxy
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
        k8s-app: oauth2-proxy
    spec:
      containers:
      - args:
        - --provider=google
        - --email-domain=freeverse.io
        - --upstream=file:///dev/null
        - --http-address=0.0.0.0:4180
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: 113905956705-rqce79rekie163lp5ok72d0oi0mnglj7.apps.googleusercontent.com
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: f32eVJ8IJ_p3b9a9ryFEdyiJ
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: NsLSqSMefZFtt+IgomYmow==
        image: quay.io/pusher/oauth2_proxy:latest
        imagePullPolicy: Always
        name: oauth2-proxy
        ports:
        - containerPort: 4180
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: relayactions
    app.kubernetes.io/component: relayactions
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: relayactions
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: relayactions
      app.kubernetes.io/component: relayactions
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: relayactions
        app.kubernetes.io/component: relayactions
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -postgres
        - postgres://$(freeverse_username):$(freeverse_password)@universedb:5432/cryptosoccer?sslmode=disable
        - -ethereum
        - http://xdai:8545
        - -updatesContractAddress
        - $(UPDATES_CONTRACT_ADDRESS)
        - -assetsContractAddress
        - $(ASSETS_CONTRACT_ADDRESS)
        - -ipfs
        - ipfsnode:5001
        - -private_key
        - $(relay_private_key)
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/relay.actions:dev
        imagePullPolicy: Always
        name: relayactions
        ports:
        - containerPort: 4000
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: synchronizer
    app.kubernetes.io/component: synchronizer
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: synchronizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: synchronizer
      app.kubernetes.io/component: synchronizer
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: synchronizer
        app.kubernetes.io/component: synchronizer
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -postgres
        - postgres://$(freeverse_username):$(freeverse_password)@universedb:5432/cryptosoccer?sslmode=disable
        - -ethereum
        - http://xdai:8545
        - -ipfs
        - ipfsnode:5001
        - -leaguesContractAddress
        - $(LEAGUES_CONTRACT_ADDRESS)
        - -engineContractAddress
        - $(ENGINE_CONTRACT_ADDRESS)
        - -enginePreCompContractAddress
        - $(ENGINEPRECOMP_CONTRACT_ADDRESS)
        - -marketContractAddress
        - $(MARKET_CONTRACT_ADDRESS)
        - -updatesContractAddress
        - $(UPDATES_CONTRACT_ADDRESS)
        - -assetsContractAddress
        - $(ASSETS_CONTRACT_ADDRESS)
        - -evolutionContractAddress
        - $(EVOLUTION_CONTRACT_ADDRESS)
        - -playandevolveContractAddress
        - $(PLAYANDEVOLVE_CONTRACT_ADDRESS)
        - -trainingpointsContractAddress
        - $(TRAININGPOINTS_CONTRACT_ADDRESS)
        - -shopContractAddress
        - $(SHOP_CONTRACT_ADDRESS)
        - -utilsContractAddress
        - $(UTILS_CONTRACT_ADDRESS)
        - -constantsgettersContractAddress
        - $(CONSTANTSGETTERS_CONTRACT_ADDRESS)
        - -delta
        - $(BLOCKS_PER_STEP)
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/synchronizer:dev
        imagePullPolicy: Always
        name: synchronizer
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: trader
    app.kubernetes.io/component: trader
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: trader
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: trader
      app.kubernetes.io/component: trader
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: trader
        app.kubernetes.io/component: trader
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -d
        - postgres://$(freeverse_username):$(freeverse_password)@marketdb:5432/market
        - -p
        - "4000"
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/market.trader:dev
        imagePullPolicy: Always
        name: trader
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: universeapi
    app.kubernetes.io/component: universeapi
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: universeapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: universeapi
      app.kubernetes.io/component: universeapi
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: universeapi
        app.kubernetes.io/component: universeapi
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - args:
        - -d
        - postgres://$(freeverse_username):$(freeverse_password)@universedb:5432/cryptosoccer
        envFrom:
        - configMapRef:
            name: freeverse-configmap
        image: freeverseio/universe.api:dev
        imagePullPolicy: Always
        name: universeapi
        ports:
        - containerPort: 4000
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/app: universedb
    app.kubernetes.io/component: universedb
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: universedb
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/app: universedb
      app.kubernetes.io/component: universedb
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  template:
    metadata:
      labels:
        app.kubernetes.io/app: universedb
        app.kubernetes.io/component: universedb
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - image: freeverseio/universe.db:dev
        imagePullPolicy: Always
        name: universedb
        ports:
        - containerPort: 5432
      imagePullSecrets:
      - name: docker-secret
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: ipfs-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ipfs-cluster
      app.kubernetes.io/part-of: cryptosoccer
      app.kubernetes.io/version: 1.0.0
  serviceName: ipfs-cluster
  template:
    metadata:
      labels:
        app: ipfs-cluster
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
      - env:
        - name: IPFS_FD_MAX
          value: "4096"
        image: ipfs/go-ipfs:v0.4.23
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          tcpSocket:
            port: swarm
          timeoutSeconds: 5
        name: ipfs
        ports:
        - containerPort: 4001
          name: swarm
          protocol: TCP
        - containerPort: 4002
          name: swarm-udp
          protocol: UDP
        - containerPort: 5001
          name: api
          protocol: TCP
        - containerPort: 8081
          name: ws
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data/ipfs
          name: ipfs-storage
        - mountPath: /custom
          name: configure-script
      - command:
        - sh
        - /custom/cluster-entrypoint.sh
        env:
        - name: PEER_PRIV_KEY
          valueFrom:
            secretKeyRef:
              key: peer-priv-key
              name: secret-config
        - name: BOOTSTRAP_PEER_ID
          valueFrom:
            configMapKeyRef:
              key: bootstrap-peer-id
              name: env-config
        - name: PEER_ID
          valueFrom:
            configMapKeyRef:
              key: peer-id
              name: env-config
        - name: PEER_ID_1
          valueFrom:
            configMapKeyRef:
              key: trusted-peer-id-1
              name: env-config
        - name: PEER_ID_2
          valueFrom:
            configMapKeyRef:
              key: trusted-peer-id-2
              name: env-config
        - name: CLUSTER_SECRET
          valueFrom:
            secretKeyRef:
              key: cluster-secret
              name: secret-config
        - name: CLUSTER_CRDT_CLUSTERNAME
          value: gr-ipfs-cluster
        - name: CLUSTER_IPFSHTTP_NODEMULTIADDRESS
          value: /ip4/127.0.0.1/tcp/5001
        - name: CLUSTER_MONITOR_PING_INTERVAL
          value: 3m
        - name: GOALREV_IPFS_CLUSTER_DNS
          value: ipfs-cluster.gorengine.com
        envFrom:
        - configMapRef:
            name: env-config
        image: ipfs/ipfs-cluster:v0.12.1
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: cluster-swarm
          timeoutSeconds: 5
        name: ipfs-cluster
        ports:
        - containerPort: 9094
          name: api-http
          protocol: TCP
        - containerPort: 9095
          name: proxy-http
          protocol: TCP
        - containerPort: 9096
          name: cluster-swarm
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data/ipfs-cluster
          name: cluster-storage
        - mountPath: /custom
          name: configure-script
      initContainers:
      - command:
        - sh
        - /custom/configure-ipfs.sh
        image: ipfs/go-ipfs:v0.4.23
        name: configure-ipfs
        volumeMounts:
        - mountPath: /data/ipfs
          name: ipfs-storage
        - mountPath: /custom
          name: configure-script
      volumes:
      - configMap:
          name: ipfs-cluster-set-bootstrap-conf
        name: configure-script
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
      name: cluster-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: do-block-storage
  - metadata:
      labels:
        app.kubernetes.io/part-of: cryptosoccer
        app.kubernetes.io/version: 1.0.0
      name: ipfs-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: do-block-storage
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-freeverse
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-error-page: http://www.mysite.com/error-cert.html
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
  labels:
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: cryptosoccer-ingress
spec:
  rules:
  - host: k8s.gorengine.com
    http:
      paths:
      - backend:
          serviceName: authproxy
          servicePort: 8080
        path: /auth
  tls:
  - hosts:
    - k8s.gorengine.com
    secretName: cryptosoccer-tls
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
  labels:
    app.kubernetes.io/app: dashboard
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: dashboard-external-auth-oauth2
spec:
  rules:
  - host: dashboard.gorengine.com
    http:
      paths:
      - backend:
          serviceName: dashboard
          servicePort: 80
        path: /
      - backend:
          serviceName: horizon
          servicePort: 4000
        path: /api
  tls:
  - hosts:
    - dashboard.gorengine.com
    secretName: cryptosoccer-dashboard-tls
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-freeverse
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-error-page: http://www.mysite.com/error-cert.html
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
  labels:
    app.kubernetes.io/app: dashboard
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/part-of: cryptosoccer
    app.kubernetes.io/version: 1.0.0
  name: dashboard-oauth2-proxy
spec:
  rules:
  - host: dashboard.gorengine.com
    http:
      paths:
      - backend:
          serviceName: oauth2-proxy
          servicePort: 4180
        path: /oauth2
  tls:
  - hosts:
    - dashboard.gorengine.com
    secretName: cryptosoccer-dashboard-tls
